
zaSime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800107c  0800107c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800107c  0800107c  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  0800107c  0800107c  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800107c  0800107c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800107c  0800107c  0000207c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001080  08001080  00002080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001084  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08001088  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08001088  00003028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000523d  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ee7  00000000  00000000  00008271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00009158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003cb  00000000  00000000  00009688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019def  00000000  00000000  00009a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004544  00000000  00000000  00023842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea82  00000000  00000000  00027d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000142c  00000000  00000000  000b684c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b7c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001064 	.word	0x08001064

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	08001064 	.word	0x08001064

080001cc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d4:	4b08      	ldr	r3, [pc, #32]	@ (80001f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001d8:	4907      	ldr	r1, [pc, #28]	@ (80001f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4313      	orrs	r3, r2
 80001de:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001e0:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	4013      	ands	r3, r2
 80001e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001ea:	68fb      	ldr	r3, [r7, #12]
}
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr
 80001f8:	40021000 	.word	0x40021000

080001fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000202:	463b      	mov	r3, r7
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
 8000210:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000212:	2001      	movs	r0, #1
 8000214:	f7ff ffda 	bl	80001cc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000218:	2002      	movs	r0, #2
 800021a:	f7ff ffd7 	bl	80001cc <LL_AHB2_GRP1_EnableClock>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800021e:	2301      	movs	r3, #1
 8000220:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022a:	463b      	mov	r3, r7
 800022c:	4619      	mov	r1, r3
 800022e:	4803      	ldr	r0, [pc, #12]	@ (800023c <MX_GPIO_Init+0x40>)
 8000230:	f000 fdb6 	bl	8000da0 <LL_GPIO_Init>

}
 8000234:	bf00      	nop
 8000236:	3718      	adds	r7, #24
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	48000400 	.word	0x48000400

08000240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000250:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <__NVIC_SetPriorityGrouping+0x44>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000256:	68ba      	ldr	r2, [r7, #8]
 8000258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800025c:	4013      	ands	r3, r2
 800025e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800026c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000272:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <__NVIC_SetPriorityGrouping+0x44>)
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	60d3      	str	r3, [r2, #12]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__NVIC_GetPriorityGrouping+0x18>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	0a1b      	lsrs	r3, r3, #8
 8000292:	f003 0307 	and.w	r3, r3, #7
}
 8000296:	4618      	mov	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	db0a      	blt.n	80002ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	@ (80002f0 <__NVIC_SetPriority+0x4c>)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	0112      	lsls	r2, r2, #4
 80002c4:	b2d2      	uxtb	r2, r2
 80002c6:	440b      	add	r3, r1
 80002c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002cc:	e00a      	b.n	80002e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	4908      	ldr	r1, [pc, #32]	@ (80002f4 <__NVIC_SetPriority+0x50>)
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	f003 030f 	and.w	r3, r3, #15
 80002da:	3b04      	subs	r3, #4
 80002dc:	0112      	lsls	r2, r2, #4
 80002de:	b2d2      	uxtb	r2, r2
 80002e0:	440b      	add	r3, r1
 80002e2:	761a      	strb	r2, [r3, #24]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000e100 	.word	0xe000e100
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	@ 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	f04f 32ff 	mov.w	r2, #4294967295
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43da      	mvns	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	401a      	ands	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000340:	f04f 31ff 	mov.w	r1, #4294967295
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43d9      	mvns	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	4313      	orrs	r3, r2
         );
}
 8000352:	4618      	mov	r0, r3
 8000354:	3724      	adds	r7, #36	@ 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
	...

08000360 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000364:	4b05      	ldr	r3, [pc, #20]	@ (800037c <LL_RCC_HSI_Enable+0x1c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <LL_RCC_HSI_Enable+0x1c>)
 800036a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800036e:	6013      	str	r3, [r2, #0]
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000384:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <LL_RCC_HSI_IsReady+0x24>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800038c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000390:	d101      	bne.n	8000396 <LL_RCC_HSI_IsReady+0x16>
 8000392:	2301      	movs	r3, #1
 8000394:	e000      	b.n	8000398 <LL_RCC_HSI_IsReady+0x18>
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	061b      	lsls	r3, r3, #24
 80003bc:	4904      	ldr	r1, [pc, #16]	@ (80003d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003be:	4313      	orrs	r3, r2
 80003c0:	604b      	str	r3, [r1, #4]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003dc:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <LL_RCC_SetSysClkSource+0x24>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	f023 0203 	bic.w	r2, r3, #3
 80003e4:	4904      	ldr	r1, [pc, #16]	@ (80003f8 <LL_RCC_SetSysClkSource+0x24>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	608b      	str	r3, [r1, #8]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000

080003fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000400:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <LL_RCC_GetSysClkSource+0x18>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	f003 030c 	and.w	r3, r3, #12
}
 8000408:	4618      	mov	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <LL_RCC_SetAHBPrescaler+0x24>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000428:	4904      	ldr	r1, [pc, #16]	@ (800043c <LL_RCC_SetAHBPrescaler+0x24>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4313      	orrs	r3, r2
 800042e:	608b      	str	r3, [r1, #8]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <LL_RCC_SetAPB1Prescaler+0x24>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000450:	4904      	ldr	r1, [pc, #16]	@ (8000464 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4313      	orrs	r3, r2
 8000456:	608b      	str	r3, [r1, #8]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40021000 	.word	0x40021000

08000468 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000478:	4904      	ldr	r1, [pc, #16]	@ (800048c <LL_RCC_SetAPB2Prescaler+0x24>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	608b      	str	r3, [r1, #8]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <LL_RCC_PLL_Enable+0x1c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a04      	ldr	r2, [pc, #16]	@ (80004ac <LL_RCC_PLL_Enable+0x1c>)
 800049a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800049e:	6013      	str	r3, [r2, #0]
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80004b4:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <LL_RCC_PLL_IsReady+0x24>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80004c0:	d101      	bne.n	80004c6 <LL_RCC_PLL_IsReady+0x16>
 80004c2:	2301      	movs	r3, #1
 80004c4:	e000      	b.n	80004c8 <LL_RCC_PLL_IsReady+0x18>
 80004c6:	2300      	movs	r3, #0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80004e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004e8:	68da      	ldr	r2, [r3, #12]
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80004ec:	4013      	ands	r3, r2
 80004ee:	68f9      	ldr	r1, [r7, #12]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4311      	orrs	r1, r2
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	0212      	lsls	r2, r2, #8
 80004f8:	4311      	orrs	r1, r2
 80004fa:	683a      	ldr	r2, [r7, #0]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	4904      	ldr	r1, [pc, #16]	@ (8000510 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000500:	4313      	orrs	r3, r2
 8000502:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	f9ff808c 	.word	0xf9ff808c

08000518 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800051c:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000526:	60d3      	str	r3, [r2, #12]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000542:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000544:	4907      	ldr	r1, [pc, #28]	@ (8000564 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <LL_APB1_GRP1_EnableClock+0x2c>)
 800054e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4013      	ands	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000

08000568 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000572:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000574:	4907      	ldr	r1, [pc, #28]	@ (8000594 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4313      	orrs	r3, r2
 800057a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <LL_APB2_GRP1_EnableClock+0x2c>)
 800057e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4013      	ands	r3, r2
 8000584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	bf00      	nop
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000

08000598 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <LL_FLASH_SetLatency+0x24>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f023 0207 	bic.w	r2, r3, #7
 80005a8:	4904      	ldr	r1, [pc, #16]	@ (80005bc <LL_FLASH_SetLatency+0x24>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	600b      	str	r3, [r1, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40022000 	.word	0x40022000

080005c0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <LL_FLASH_GetLatency+0x18>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f003 0307 	and.w	r3, r3, #7
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40022000 	.word	0x40022000

080005dc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80005ec:	4904      	ldr	r1, [pc, #16]	@ (8000600 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	600b      	str	r3, [r1, #0]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40007000 	.word	0x40007000

08000604 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000614:	d101      	bne.n	800061a <LL_PWR_IsActiveFlag_VOS+0x16>
 8000616:	2301      	movs	r3, #1
 8000618:	e000      	b.n	800061c <LL_PWR_IsActiveFlag_VOS+0x18>
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40007000 	.word	0x40007000

0800062c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f043 0201 	orr.w	r2, r3, #1
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	f043 0201 	orr.w	r2, r3, #1
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	60da      	str	r2, [r3, #12]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	691a      	ldr	r2, [r3, #16]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	4013      	ands	r3, r2
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d101      	bne.n	8000688 <LL_GPIO_IsInputPinSet+0x1c>
 8000684:	2301      	movs	r3, #1
 8000686:	e000      	b.n	800068a <LL_GPIO_IsInputPinSet+0x1e>
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff63 	bl	8000568 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006a2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80006a6:	f7ff ff47 	bl	8000538 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006aa:	2003      	movs	r0, #3
 80006ac:	f7ff fdc8 	bl	8000240 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80006b0:	f7ff fdea 	bl	8000288 <__NVIC_GetPriorityGrouping>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2200      	movs	r2, #0
 80006b8:	210f      	movs	r1, #15
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fe1c 	bl	80002f8 <NVIC_EncodePriority>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4619      	mov	r1, r3
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f7ff fdec 	bl	80002a4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f81e 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f7ff fd94 	bl	80001fc <MX_GPIO_Init>
  MX_TIM6_Init();
 80006d4:	f000 f9b6 	bl	8000a44 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
 LL_TIM_EnableIT_UPDATE(TIM6);
 80006d8:	4809      	ldr	r0, [pc, #36]	@ (8000700 <main+0x68>)
 80006da:	f7ff ffb7 	bl	800064c <LL_TIM_EnableIT_UPDATE>
 LL_TIM_EnableCounter(TIM6);
 80006de:	4808      	ldr	r0, [pc, #32]	@ (8000700 <main+0x68>)
 80006e0:	f7ff ffa4 	bl	800062c <LL_TIM_EnableCounter>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
 if(LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_0)==1){
 80006e4:	2101      	movs	r1, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	@ (8000704 <main+0x6c>)
 80006e8:	f7ff ffc0 	bl	800066c <LL_GPIO_IsInputPinSet>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d1f8      	bne.n	80006e4 <main+0x4c>
	 //kada je cinc unutra onda je 1, a kada ga izvucemo onda je 0
	 stanje_senzora++;
 80006f2:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <main+0x70>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	4a03      	ldr	r2, [pc, #12]	@ (8000708 <main+0x70>)
 80006fa:	6013      	str	r3, [r2, #0]
 if(LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_0)==1){
 80006fc:	e7f2      	b.n	80006e4 <main+0x4c>
 80006fe:	bf00      	nop
 8000700:	40001000 	.word	0x40001000
 8000704:	48000400 	.word	0x48000400
 8000708:	20000020 	.word	0x20000020

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000710:	2004      	movs	r0, #4
 8000712:	f7ff ff41 	bl	8000598 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000716:	bf00      	nop
 8000718:	f7ff ff52 	bl	80005c0 <LL_FLASH_GetLatency>
 800071c:	4603      	mov	r3, r0
 800071e:	2b04      	cmp	r3, #4
 8000720:	d1fa      	bne.n	8000718 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000722:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000726:	f7ff ff59 	bl	80005dc <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800072a:	bf00      	nop
 800072c:	f7ff ff6a 	bl	8000604 <LL_PWR_IsActiveFlag_VOS>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1fa      	bne.n	800072c <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSI_Enable();
 8000736:	f7ff fe13 	bl	8000360 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800073a:	bf00      	nop
 800073c:	f7ff fe20 	bl	8000380 <LL_RCC_HSI_IsReady>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d1fa      	bne.n	800073c <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000746:	2010      	movs	r0, #16
 8000748:	f7ff fe2e 	bl	80003a8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 800074c:	2300      	movs	r3, #0
 800074e:	220a      	movs	r2, #10
 8000750:	2100      	movs	r1, #0
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff fec0 	bl	80004d8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000758:	f7ff fede 	bl	8000518 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 800075c:	f7ff fe98 	bl	8000490 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000760:	bf00      	nop
 8000762:	f7ff fea5 	bl	80004b0 <LL_RCC_PLL_IsReady>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d1fa      	bne.n	8000762 <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800076c:	2003      	movs	r0, #3
 800076e:	f7ff fe31 	bl	80003d4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000772:	bf00      	nop
 8000774:	f7ff fe42 	bl	80003fc <LL_RCC_GetSysClkSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b0c      	cmp	r3, #12
 800077c:	d1fa      	bne.n	8000774 <SystemClock_Config+0x68>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff fe4a 	bl	8000418 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fe5b 	bl	8000440 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff fe6c 	bl	8000468 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <SystemClock_Config+0x94>)
 8000792:	f000 fc25 	bl	8000fe0 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8000796:	4802      	ldr	r0, [pc, #8]	@ (80007a0 <SystemClock_Config+0x94>)
 8000798:	f000 fc30 	bl	8000ffc <LL_SetSystemCoreClock>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	04c4b400 	.word	0x04c4b400

080007a4 <LL_TIM_ClearFlag_UPDATE>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f06f 0201 	mvn.w	r2, #1
 80007b2:	611a      	str	r2, [r3, #16]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d101      	bne.n	80007d8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80007d4:	2301      	movs	r3, #1
 80007d6:	e000      	b.n	80007da <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ea:	bf00      	nop
 80007ec:	e7fd      	b.n	80007ea <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	bf00      	nop
 80007f4:	e7fd      	b.n	80007f2 <HardFault_Handler+0x4>

080007f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fa:	bf00      	nop
 80007fc:	e7fd      	b.n	80007fa <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	bf00      	nop
 8000804:	e7fd      	b.n	8000802 <BusFault_Handler+0x4>

08000806 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080a:	bf00      	nop
 800080c:	e7fd      	b.n	800080a <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
 if (LL_TIM_IsActiveFlag_UPDATE(TIM6))
 800084c:	4807      	ldr	r0, [pc, #28]	@ (800086c <TIM6_DAC_IRQHandler+0x24>)
 800084e:	f7ff ffb7 	bl	80007c0 <LL_TIM_IsActiveFlag_UPDATE>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d007      	beq.n	8000868 <TIM6_DAC_IRQHandler+0x20>
 {
	 LL_TIM_ClearFlag_UPDATE(TIM6);
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <TIM6_DAC_IRQHandler+0x24>)
 800085a:	f7ff ffa3 	bl	80007a4 <LL_TIM_ClearFlag_UPDATE>

	 sys_time ++;
 800085e:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <TIM6_DAC_IRQHandler+0x28>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a02      	ldr	r2, [pc, #8]	@ (8000870 <TIM6_DAC_IRQHandler+0x28>)
 8000866:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40001000 	.word	0x40001000
 8000870:	20000024 	.word	0x20000024

08000874 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <SystemInit+0x20>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087e:	4a05      	ldr	r2, [pc, #20]	@ (8000894 <SystemInit+0x20>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_GetPriorityGrouping>:
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	@ (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_EnableIRQ>:
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db0b      	blt.n	80008de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 021f 	and.w	r2, r3, #31
 80008cc:	4907      	ldr	r1, [pc, #28]	@ (80008ec <__NVIC_EnableIRQ+0x38>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <__NVIC_SetPriority>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	db0a      	blt.n	800091a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	490c      	ldr	r1, [pc, #48]	@ (800093c <__NVIC_SetPriority+0x4c>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	440b      	add	r3, r1
 8000914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000918:	e00a      	b.n	8000930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4908      	ldr	r1, [pc, #32]	@ (8000940 <__NVIC_SetPriority+0x50>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	3b04      	subs	r3, #4
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	440b      	add	r3, r1
 800092e:	761a      	strb	r2, [r3, #24]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <NVIC_EncodePriority>:
{
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	@ 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 0307 	rsb	r3, r3, #7
 800095e:	2b04      	cmp	r3, #4
 8000960:	bf28      	it	cs
 8000962:	2304      	movcs	r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3304      	adds	r3, #4
 800096a:	2b06      	cmp	r3, #6
 800096c:	d902      	bls.n	8000974 <NVIC_EncodePriority+0x30>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3b03      	subs	r3, #3
 8000972:	e000      	b.n	8000976 <NVIC_EncodePriority+0x32>
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43da      	mvns	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	401a      	ands	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43d9      	mvns	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	4313      	orrs	r3, r2
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3724      	adds	r7, #36	@ 0x24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <LL_APB1_GRP1_EnableClock>:
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009b8:	4907      	ldr	r1, [pc, #28]	@ (80009d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4313      	orrs	r3, r2
 80009be:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4013      	ands	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000

080009dc <LL_TIM_DisableARRPreload>:
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_TIM_SetTriggerOutput>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <LL_TIM_DisableMasterSlaveMode>:
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	609a      	str	r2, [r3, #8]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f7ff ffa7 	bl	80009ac <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000a5e:	f7ff ff1b 	bl	8000898 <__NVIC_GetPriorityGrouping>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff6b 	bl	8000944 <NVIC_EncodePriority>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4619      	mov	r1, r3
 8000a72:	2036      	movs	r0, #54	@ 0x36
 8000a74:	f7ff ff3c 	bl	80008f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a78:	2036      	movs	r0, #54	@ 0x36
 8000a7a:	f7ff ff1b 	bl	80008b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 79;
 8000a7e:	234f      	movs	r3, #79	@ 0x4f
 8000a80:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8000a86:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000a8a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	@ (8000ab4 <MX_TIM6_Init+0x70>)
 8000a92:	f000 fa2d 	bl	8000ef0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8000a96:	4807      	ldr	r0, [pc, #28]	@ (8000ab4 <MX_TIM6_Init+0x70>)
 8000a98:	f7ff ffa0 	bl	80009dc <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_TIM6_Init+0x70>)
 8000aa0:	f7ff ffac 	bl	80009fc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8000aa4:	4803      	ldr	r0, [pc, #12]	@ (8000ab4 <MX_TIM6_Init+0x70>)
 8000aa6:	f7ff ffbc 	bl	8000a22 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40001000 	.word	0x40001000

08000ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000af0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000abc:	f7ff feda 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	@ (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f000 fa99 	bl	800101c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aea:	f7ff fdd5 	bl	8000698 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000afc:	08001084 	.word	0x08001084
  ldr r2, =_sbss
 8000b00:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b04:	20000028 	.word	0x20000028

08000b08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_IRQHandler>

08000b0a <LL_GPIO_SetPinMode>:
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b08b      	sub	sp, #44	@ 0x2c
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	fa93 f3a3 	rbit	r3, r3
 8000b24:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000b30:	2320      	movs	r3, #32
 8000b32:	e003      	b.n	8000b3c <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fab3 f383 	clz	r3, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	2103      	movs	r1, #3
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	401a      	ands	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	fa93 f3a3 	rbit	r3, r3
 8000b52:	61fb      	str	r3, [r7, #28]
  return result;
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	e003      	b.n	8000b6a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b64:	fab3 f383 	clz	r3, r3
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	431a      	orrs	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	372c      	adds	r7, #44	@ 0x2c
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_GPIO_SetPinOutputType>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	605a      	str	r2, [r3, #4]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <LL_GPIO_SetPinSpeed>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b08b      	sub	sp, #44	@ 0x2c
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa93 f3a3 	rbit	r3, r3
 8000bce:	613b      	str	r3, [r7, #16]
  return result;
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000bda:	2320      	movs	r3, #32
 8000bdc:	e003      	b.n	8000be6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	fab3 f383 	clz	r3, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2103      	movs	r1, #3
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	61fb      	str	r3, [r7, #28]
  return result;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000c08:	2320      	movs	r3, #32
 8000c0a:	e003      	b.n	8000c14 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0e:	fab3 f383 	clz	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	609a      	str	r2, [r3, #8]
}
 8000c22:	bf00      	nop
 8000c24:	372c      	adds	r7, #44	@ 0x2c
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <LL_GPIO_SetPinPull>:
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b08b      	sub	sp, #44	@ 0x2c
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa93 f3a3 	rbit	r3, r3
 8000c48:	613b      	str	r3, [r7, #16]
  return result;
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000c54:	2320      	movs	r3, #32
 8000c56:	e003      	b.n	8000c60 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fab3 f383 	clz	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c70:	6a3b      	ldr	r3, [r7, #32]
 8000c72:	fa93 f3a3 	rbit	r3, r3
 8000c76:	61fb      	str	r3, [r7, #28]
  return result;
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000c82:	2320      	movs	r3, #32
 8000c84:	e003      	b.n	8000c8e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c88:	fab3 f383 	clz	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	431a      	orrs	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	60da      	str	r2, [r3, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	372c      	adds	r7, #44	@ 0x2c
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_GPIO_SetAFPin_0_7>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b08b      	sub	sp, #44	@ 0x2c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6a1a      	ldr	r2, [r3, #32]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	613b      	str	r3, [r7, #16]
  return result;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	e003      	b.n	8000cda <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	fab3 f383 	clz	r3, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	210f      	movs	r1, #15
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	fa93 f3a3 	rbit	r3, r3
 8000cf0:	61fb      	str	r3, [r7, #28]
  return result;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	e003      	b.n	8000d08 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d02:	fab3 f383 	clz	r3, r3
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	431a      	orrs	r2, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	621a      	str	r2, [r3, #32]
}
 8000d16:	bf00      	nop
 8000d18:	372c      	adds	r7, #44	@ 0x2c
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <LL_GPIO_SetAFPin_8_15>:
{
 8000d22:	b480      	push	{r7}
 8000d24:	b08b      	sub	sp, #44	@ 0x2c
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa93 f3a3 	rbit	r3, r3
 8000d3e:	613b      	str	r3, [r7, #16]
  return result;
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	e003      	b.n	8000d56 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	fab3 f383 	clz	r3, r3
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	210f      	movs	r1, #15
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	401a      	ands	r2, r3
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	fa93 f3a3 	rbit	r3, r3
 8000d6e:	61fb      	str	r3, [r7, #28]
  return result;
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000d7a:	2320      	movs	r3, #32
 8000d7c:	e003      	b.n	8000d86 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d94:	bf00      	nop
 8000d96:	372c      	adds	r7, #44	@ 0x2c
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	60fb      	str	r3, [r7, #12]
  return result;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <LL_GPIO_Init+0x26>
    return 32U;
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	e003      	b.n	8000dce <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000dd0:	e048      	b.n	8000e64 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d03a      	beq.n	8000e5e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d003      	beq.n	8000df8 <LL_GPIO_Init+0x58>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d10e      	bne.n	8000e16 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fed7 	bl	8000bb4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff feb7 	bl	8000b84 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	69b9      	ldr	r1, [r7, #24]
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ff05 	bl	8000c2e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d111      	bne.n	8000e50 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2bff      	cmp	r3, #255	@ 0xff
 8000e30:	d807      	bhi.n	8000e42 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	461a      	mov	r2, r3
 8000e38:	69b9      	ldr	r1, [r7, #24]
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff34 	bl	8000ca8 <LL_GPIO_SetAFPin_0_7>
 8000e40:	e006      	b.n	8000e50 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	461a      	mov	r2, r3
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff69 	bl	8000d22 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	461a      	mov	r2, r3
 8000e56:	69b9      	ldr	r1, [r7, #24]
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fe56 	bl	8000b0a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1af      	bne.n	8000dd2 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <LL_TIM_SetPrescaler>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_TIM_SetAutoReload>:
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_TIM_SetRepetitionCounter>:
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	615a      	str	r2, [r3, #20]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <LL_TIM_Init+0xb0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d003      	beq.n	8000f10 <LL_TIM_Init+0x20>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f0e:	d106      	bne.n	8000f1e <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa0 <LL_TIM_Init+0xb0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00b      	beq.n	8000f3e <LL_TIM_Init+0x4e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f2c:	d007      	beq.n	8000f3e <LL_TIM_Init+0x4e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <LL_TIM_Init+0xb4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d003      	beq.n	8000f3e <LL_TIM_Init+0x4e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <LL_TIM_Init+0xb8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d106      	bne.n	8000f4c <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff9d 	bl	8000e98 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	4619      	mov	r1, r3
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff89 	bl	8000e7c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <LL_TIM_Init+0xb0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <LL_TIM_Init+0x92>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <LL_TIM_Init+0xb4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d003      	beq.n	8000f82 <LL_TIM_Init+0x92>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <LL_TIM_Init+0xb8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d105      	bne.n	8000f8e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff93 	bl	8000eb4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff9e 	bl	8000ed0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40012c00 	.word	0x40012c00
 8000fa4:	40014000 	.word	0x40014000
 8000fa8:	40014400 	.word	0x40014400

08000fac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4a07      	ldr	r2, [pc, #28]	@ (8000fdc <LL_InitTick+0x30>)
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <LL_InitTick+0x30>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <LL_InitTick+0x30>)
 8000fcc:	2205      	movs	r2, #5
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000fe8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffdd 	bl	8000fac <LL_InitTick>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <LL_SetSystemCoreClock+0x1c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000000 	.word	0x20000000

0800101c <__libc_init_array>:
 800101c:	b570      	push	{r4, r5, r6, lr}
 800101e:	4d0d      	ldr	r5, [pc, #52]	@ (8001054 <__libc_init_array+0x38>)
 8001020:	4c0d      	ldr	r4, [pc, #52]	@ (8001058 <__libc_init_array+0x3c>)
 8001022:	1b64      	subs	r4, r4, r5
 8001024:	10a4      	asrs	r4, r4, #2
 8001026:	2600      	movs	r6, #0
 8001028:	42a6      	cmp	r6, r4
 800102a:	d109      	bne.n	8001040 <__libc_init_array+0x24>
 800102c:	4d0b      	ldr	r5, [pc, #44]	@ (800105c <__libc_init_array+0x40>)
 800102e:	4c0c      	ldr	r4, [pc, #48]	@ (8001060 <__libc_init_array+0x44>)
 8001030:	f000 f818 	bl	8001064 <_init>
 8001034:	1b64      	subs	r4, r4, r5
 8001036:	10a4      	asrs	r4, r4, #2
 8001038:	2600      	movs	r6, #0
 800103a:	42a6      	cmp	r6, r4
 800103c:	d105      	bne.n	800104a <__libc_init_array+0x2e>
 800103e:	bd70      	pop	{r4, r5, r6, pc}
 8001040:	f855 3b04 	ldr.w	r3, [r5], #4
 8001044:	4798      	blx	r3
 8001046:	3601      	adds	r6, #1
 8001048:	e7ee      	b.n	8001028 <__libc_init_array+0xc>
 800104a:	f855 3b04 	ldr.w	r3, [r5], #4
 800104e:	4798      	blx	r3
 8001050:	3601      	adds	r6, #1
 8001052:	e7f2      	b.n	800103a <__libc_init_array+0x1e>
 8001054:	0800107c 	.word	0x0800107c
 8001058:	0800107c 	.word	0x0800107c
 800105c:	0800107c 	.word	0x0800107c
 8001060:	08001080 	.word	0x08001080

08001064 <_init>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr

08001070 <_fini>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	bf00      	nop
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr
