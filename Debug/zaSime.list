
zaSime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a98  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004c28  08004c28  00005c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e28  08004e28  0000601c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e28  08004e28  0000601c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e28  08004e28  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e28  08004e28  00005e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e2c  08004e2c  00005e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004e30  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000001c  08004e4c  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004e4c  0000613c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d27b  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022af  00000000  00000000  000132c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00015578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b66  00000000  00000000  00016460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023558  00000000  00000000  00016fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff2c  00000000  00000000  0003a51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4677  00000000  00000000  0004a44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011eac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004234  00000000  00000000  0011eb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00122d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c10 	.word	0x08004c10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08004c10 	.word	0x08004c10

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	619a      	str	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <motor1_init>:

extern TIM_HandleTypeDef htim16; // Eksterni tajmer, definisan u main.c
extern TIM_HandleTypeDef htim15;


void motor1_init(uint8_t smijer, uint16_t faktor_ispune) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	80bb      	strh	r3, [r7, #4]

	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4812      	ldr	r0, [pc, #72]	@ (8000c40 <motor1_init+0x5c>)
 8000bf8:	f001 ff12 	bl	8002a20 <HAL_TIM_PWM_Start>

	TIM16->CCR1 = faktor_ispune;
 8000bfc:	4a11      	ldr	r2, [pc, #68]	@ (8000c44 <motor1_init+0x60>)
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	6353      	str	r3, [r2, #52]	@ 0x34

	if (smijer == 1) {
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d10a      	bne.n	8000c1e <motor1_init+0x3a>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000c08:	2110      	movs	r1, #16
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0e:	f7ff ffdb 	bl	8000bc8 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000c12:	2120      	movs	r1, #32
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c18:	f7ff ffc8 	bl	8000bac <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
	}


}
 8000c1c:	e00c      	b.n	8000c38 <motor1_init+0x54>
	} else if (smijer == 2) {
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d109      	bne.n	8000c38 <motor1_init+0x54>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000c24:	2120      	movs	r1, #32
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2a:	f7ff ffcd 	bl	8000bc8 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000c2e:	2110      	movs	r1, #16
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c34:	f7ff ffba 	bl	8000bac <LL_GPIO_SetOutputPin>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000ec 	.word	0x200000ec
 8000c44:	40014400 	.word	0x40014400

08000c48 <motor2_init>:

void motor2_init(uint8_t smijer, uint16_t faktor_ispune) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	80bb      	strh	r3, [r7, #4]

	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4810      	ldr	r0, [pc, #64]	@ (8000c9c <motor2_init+0x54>)
 8000c5c:	f001 fee0 	bl	8002a20 <HAL_TIM_PWM_Start>

	TIM15->CCR1=faktor_ispune;
 8000c60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca0 <motor2_init+0x58>)
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	6353      	str	r3, [r2, #52]	@ 0x34

	if (smijer == 1) {
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d108      	bne.n	8000c7e <motor2_init+0x36>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <motor2_init+0x5c>)
 8000c70:	f7ff ffaa 	bl	8000bc8 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000c74:	2120      	movs	r1, #32
 8000c76:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <motor2_init+0x5c>)
 8000c78:	f7ff ff98 	bl	8000bac <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
	}


}
 8000c7c:	e00a      	b.n	8000c94 <motor2_init+0x4c>
	} else if (smijer == 2) {
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d107      	bne.n	8000c94 <motor2_init+0x4c>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000c84:	2120      	movs	r1, #32
 8000c86:	4807      	ldr	r0, [pc, #28]	@ (8000ca4 <motor2_init+0x5c>)
 8000c88:	f7ff ff9e 	bl	8000bc8 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <motor2_init+0x5c>)
 8000c90:	f7ff ff8c 	bl	8000bac <LL_GPIO_SetOutputPin>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000a0 	.word	0x200000a0
 8000ca0:	40014000 	.word	0x40014000
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <odometrija_init>:
static float x=0;
static float y=0;

static float inc2mm;

void odometrija_init() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
	    R = 82.5;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <odometrija_init+0x80>)
 8000cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <odometrija_init+0x84>)
 8000cb2:	601a      	str	r2, [r3, #0]
		b = 128.60;
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <odometrija_init+0x88>)
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d34 <odometrija_init+0x8c>)
 8000cb8:	601a      	str	r2, [r3, #0]

		float Oot = R * M_PI;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <odometrija_init+0x80>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fbea 	bl	8000498 <__aeabi_f2d>
 8000cc4:	a316      	add	r3, pc, #88	@ (adr r3, 8000d20 <odometrija_init+0x78>)
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	f7ff fc3d 	bl	8000548 <__aeabi_dmul>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f7ff ff19 	bl	8000b0c <__aeabi_d2f>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	60fb      	str	r3, [r7, #12]
		float N = 1000.0 / Oot;
 8000cde:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000d38 <odometrija_init+0x90>
 8000ce2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cea:	edc7 7a02 	vstr	s15, [r7, #8]
		float n = N * 546 * 4;   //13*42
 8000cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cf2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000d3c <odometrija_init+0x94>
 8000cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d02:	edc7 7a01 	vstr	s15, [r7, #4]
		inc2mm = 1000.0 / n;
 8000d06:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000d38 <odometrija_init+0x90>
 8000d0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <odometrija_init+0x98>)
 8000d14:	edc3 7a00 	vstr	s15, [r3]
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	54442d18 	.word	0x54442d18
 8000d24:	400921fb 	.word	0x400921fb
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	42a50000 	.word	0x42a50000
 8000d30:	20000004 	.word	0x20000004
 8000d34:	4300999a 	.word	0x4300999a
 8000d38:	447a0000 	.word	0x447a0000
 8000d3c:	44088000 	.word	0x44088000
 8000d40:	20000064 	.word	0x20000064
 8000d44:	00000000 	.word	0x00000000

08000d48 <odometrija>:

void odometrija() {
 8000d48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d4c:	af00      	add	r7, sp, #0
	vd_inc=tim1_brzina();
 8000d4e:	f001 faaf 	bl	80022b0 <tim1_brzina>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b64      	ldr	r3, [pc, #400]	@ (8000ee8 <odometrija+0x1a0>)
 8000d58:	801a      	strh	r2, [r3, #0]
	vl_inc = tim2_brzina();
 8000d5a:	f001 fabd 	bl	80022d8 <tim2_brzina>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b62      	ldr	r3, [pc, #392]	@ (8000eec <odometrija+0x1a4>)
 8000d64:	801a      	strh	r2, [r3, #0]
//	vd = ((float)vd_inc /2184.0) *1000.0; //(float) vd_inc * inc2mm;
//	vd_mm = (float) vd_inc * 3.14*R;
//	vl = ((float)vl_inc /2184.0) *1000.0; //(float) vl_inc * inc2mm;
//	vl_mm = (float) vl_inc * 3.14*R;

	vd_mm = (float) vd_inc * inc2mm;
 8000d66:	4b60      	ldr	r3, [pc, #384]	@ (8000ee8 <odometrija+0x1a0>)
 8000d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d74:	4b5e      	ldr	r3, [pc, #376]	@ (8000ef0 <odometrija+0x1a8>)
 8000d76:	edd3 7a00 	vldr	s15, [r3]
 8000d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ef4 <odometrija+0x1ac>)
 8000d80:	edc3 7a00 	vstr	s15, [r3]
	vl_mm = (float) vl_inc * inc2mm;
 8000d84:	4b59      	ldr	r3, [pc, #356]	@ (8000eec <odometrija+0x1a4>)
 8000d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d92:	4b57      	ldr	r3, [pc, #348]	@ (8000ef0 <odometrija+0x1a8>)
 8000d94:	edd3 7a00 	vldr	s15, [r3]
 8000d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9c:	4b56      	ldr	r3, [pc, #344]	@ (8000ef8 <odometrija+0x1b0>)
 8000d9e:	edc3 7a00 	vstr	s15, [r3]

	V = (vd_mm + vl_mm) / 2.0;
 8000da2:	4b54      	ldr	r3, [pc, #336]	@ (8000ef4 <odometrija+0x1ac>)
 8000da4:	ed93 7a00 	vldr	s14, [r3]
 8000da8:	4b53      	ldr	r3, [pc, #332]	@ (8000ef8 <odometrija+0x1b0>)
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000db2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000db6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dba:	4b50      	ldr	r3, [pc, #320]	@ (8000efc <odometrija+0x1b4>)
 8000dbc:	edc3 7a00 	vstr	s15, [r3]
	w = (vd_mm - vl_mm) / b;
 8000dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ef4 <odometrija+0x1ac>)
 8000dc2:	ed93 7a00 	vldr	s14, [r3]
 8000dc6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ef8 <odometrija+0x1b0>)
 8000dc8:	edd3 7a00 	vldr	s15, [r3]
 8000dcc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f00 <odometrija+0x1b8>)
 8000dd2:	ed93 7a00 	vldr	s14, [r3]
 8000dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dda:	4b4a      	ldr	r3, [pc, #296]	@ (8000f04 <odometrija+0x1bc>)
 8000ddc:	edc3 7a00 	vstr	s15, [r3]

	fi += w;
 8000de0:	4b49      	ldr	r3, [pc, #292]	@ (8000f08 <odometrija+0x1c0>)
 8000de2:	ed93 7a00 	vldr	s14, [r3]
 8000de6:	4b47      	ldr	r3, [pc, #284]	@ (8000f04 <odometrija+0x1bc>)
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df0:	4b45      	ldr	r3, [pc, #276]	@ (8000f08 <odometrija+0x1c0>)
 8000df2:	edc3 7a00 	vstr	s15, [r3]
    fi_deg = fi * 57.2957795;    //ovo je za racunanje u stepenima, ali je bolje racunati sin i cos u radianima!!!
 8000df6:	4b44      	ldr	r3, [pc, #272]	@ (8000f08 <odometrija+0x1c0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fb4c 	bl	8000498 <__aeabi_f2d>
 8000e00:	a337      	add	r3, pc, #220	@ (adr r3, 8000ee0 <odometrija+0x198>)
 8000e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e06:	f7ff fb9f 	bl	8000548 <__aeabi_dmul>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	f7ff fe7b 	bl	8000b0c <__aeabi_d2f>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a3c      	ldr	r2, [pc, #240]	@ (8000f0c <odometrija+0x1c4>)
 8000e1a:	6013      	str	r3, [r2, #0]
//  x  += (V * cos(fi_deg));
//  y  += (V * sin(fi_deg));
//	fi_deg = fi * 57.2957795;
	x += (V * cos(fi));
 8000e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f10 <odometrija+0x1c8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fb39 	bl	8000498 <__aeabi_f2d>
 8000e26:	4604      	mov	r4, r0
 8000e28:	460d      	mov	r5, r1
 8000e2a:	4b34      	ldr	r3, [pc, #208]	@ (8000efc <odometrija+0x1b4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fb32 	bl	8000498 <__aeabi_f2d>
 8000e34:	4680      	mov	r8, r0
 8000e36:	4689      	mov	r9, r1
 8000e38:	4b33      	ldr	r3, [pc, #204]	@ (8000f08 <odometrija+0x1c0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb2b 	bl	8000498 <__aeabi_f2d>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	ec43 2b10 	vmov	d0, r2, r3
 8000e4a:	f002 fe5d 	bl	8003b08 <cos>
 8000e4e:	ec53 2b10 	vmov	r2, r3, d0
 8000e52:	4640      	mov	r0, r8
 8000e54:	4649      	mov	r1, r9
 8000e56:	f7ff fb77 	bl	8000548 <__aeabi_dmul>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4620      	mov	r0, r4
 8000e60:	4629      	mov	r1, r5
 8000e62:	f7ff f9bb 	bl	80001dc <__adddf3>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fe4d 	bl	8000b0c <__aeabi_d2f>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4a26      	ldr	r2, [pc, #152]	@ (8000f10 <odometrija+0x1c8>)
 8000e76:	6013      	str	r3, [r2, #0]
	y += (V * sin(fi));
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <odometrija+0x1cc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fb0b 	bl	8000498 <__aeabi_f2d>
 8000e82:	4604      	mov	r4, r0
 8000e84:	460d      	mov	r5, r1
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <odometrija+0x1b4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb04 	bl	8000498 <__aeabi_f2d>
 8000e90:	4680      	mov	r8, r0
 8000e92:	4689      	mov	r9, r1
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <odometrija+0x1c0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fafd 	bl	8000498 <__aeabi_f2d>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	ec43 2b10 	vmov	d0, r2, r3
 8000ea6:	f002 fe83 	bl	8003bb0 <sin>
 8000eaa:	ec53 2b10 	vmov	r2, r3, d0
 8000eae:	4640      	mov	r0, r8
 8000eb0:	4649      	mov	r1, r9
 8000eb2:	f7ff fb49 	bl	8000548 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4620      	mov	r0, r4
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	f7ff f98d 	bl	80001dc <__adddf3>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f7ff fe1f 	bl	8000b0c <__aeabi_d2f>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a10      	ldr	r2, [pc, #64]	@ (8000f14 <odometrija+0x1cc>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w
 8000ee0:	1a47a9e3 	.word	0x1a47a9e3
 8000ee4:	404ca5dc 	.word	0x404ca5dc
 8000ee8:	20000038 	.word	0x20000038
 8000eec:	2000003a 	.word	0x2000003a
 8000ef0:	20000064 	.word	0x20000064
 8000ef4:	20000044 	.word	0x20000044
 8000ef8:	20000048 	.word	0x20000048
 8000efc:	2000004c 	.word	0x2000004c
 8000f00:	20000004 	.word	0x20000004
 8000f04:	20000050 	.word	0x20000050
 8000f08:	20000054 	.word	0x20000054
 8000f0c:	20000058 	.word	0x20000058
 8000f10:	2000005c 	.word	0x2000005c
 8000f14:	20000060 	.word	0x20000060

08000f18 <odometrija_brzina_d>:
float odom_fi_deg(){
	return fi_deg;
}

float odometrija_brzina_d()
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	return vd;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <odometrija_brzina_d+0x18>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	ee07 3a90 	vmov	s15, r3
}
 8000f24:	eeb0 0a67 	vmov.f32	s0, s15
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	2000003c 	.word	0x2000003c

08000f34 <odometrija_brzina_l>:

float odometrija_brzina_l()
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	return vl;
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <odometrija_brzina_l+0x18>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	ee07 3a90 	vmov	s15, r3
}
 8000f40:	eeb0 0a67 	vmov.f32	s0, s15
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	20000040 	.word	0x20000040

08000f50 <pid_brzina_m1>:
int8_t n = 0;



void pid_brzina_m1(float ref)
{
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	ed87 0a01 	vstr	s0, [r7, #4]
	merena_m1 = odometrija_brzina_d();
 8000f5a:	f7ff ffdd 	bl	8000f18 <odometrija_brzina_d>
 8000f5e:	eef0 7a40 	vmov.f32	s15, s0
 8000f62:	4b44      	ldr	r3, [pc, #272]	@ (8001074 <pid_brzina_m1+0x124>)
 8000f64:	edc3 7a00 	vstr	s15, [r3]
	e_m1 =  ref  - merena_m1;
 8000f68:	4b42      	ldr	r3, [pc, #264]	@ (8001074 <pid_brzina_m1+0x124>)
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f76:	4b40      	ldr	r3, [pc, #256]	@ (8001078 <pid_brzina_m1+0x128>)
 8000f78:	edc3 7a00 	vstr	s15, [r3]

	u_p_m1 = kp * (e_m1 - e_pre_m1);
 8000f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001078 <pid_brzina_m1+0x128>)
 8000f7e:	ed93 7a00 	vldr	s14, [r3]
 8000f82:	4b3e      	ldr	r3, [pc, #248]	@ (800107c <pid_brzina_m1+0x12c>)
 8000f84:	edd3 7a00 	vldr	s15, [r3]
 8000f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001080 <pid_brzina_m1+0x130>)
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	4b3b      	ldr	r3, [pc, #236]	@ (8001084 <pid_brzina_m1+0x134>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]
	u_i_m1 = ki * e_m1;
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <pid_brzina_m1+0x138>)
 8000f9e:	ed93 7a00 	vldr	s14, [r3]
 8000fa2:	4b35      	ldr	r3, [pc, #212]	@ (8001078 <pid_brzina_m1+0x128>)
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fac:	4b37      	ldr	r3, [pc, #220]	@ (800108c <pid_brzina_m1+0x13c>)
 8000fae:	edc3 7a00 	vstr	s15, [r3]
	u_m1 = u_m1 + u_p_m1 + u_i_m1;
 8000fb2:	4b37      	ldr	r3, [pc, #220]	@ (8001090 <pid_brzina_m1+0x140>)
 8000fb4:	ed93 7a00 	vldr	s14, [r3]
 8000fb8:	4b32      	ldr	r3, [pc, #200]	@ (8001084 <pid_brzina_m1+0x134>)
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc2:	4b32      	ldr	r3, [pc, #200]	@ (800108c <pid_brzina_m1+0x13c>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <pid_brzina_m1+0x140>)
 8000fce:	edc3 7a00 	vstr	s15, [r3]

	e_pre_m1 = e_m1;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <pid_brzina_m1+0x128>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a29      	ldr	r2, [pc, #164]	@ (800107c <pid_brzina_m1+0x12c>)
 8000fd8:	6013      	str	r3, [r2, #0]

	//saturacija, counter period za TIM15 i TIM16 je 100-1
	if(u_m1 > 1999)
 8000fda:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <pid_brzina_m1+0x140>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001094 <pid_brzina_m1+0x144>
 8000fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	dd03      	ble.n	8000ff6 <pid_brzina_m1+0xa6>
	{
		u_m1 = 1999;
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <pid_brzina_m1+0x140>)
 8000ff0:	4a29      	ldr	r2, [pc, #164]	@ (8001098 <pid_brzina_m1+0x148>)
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	e00c      	b.n	8001010 <pid_brzina_m1+0xc0>
	}
	else if(u_m1 < -1999.0)
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <pid_brzina_m1+0x140>)
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800109c <pid_brzina_m1+0x14c>
 8001000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001008:	d502      	bpl.n	8001010 <pid_brzina_m1+0xc0>
	{
		u_m1 = -1999.0;
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <pid_brzina_m1+0x140>)
 800100c:	4a24      	ldr	r2, [pc, #144]	@ (80010a0 <pid_brzina_m1+0x150>)
 800100e:	601a      	str	r2, [r3, #0]
	}

	if(u_m1 > 0)
 8001010:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <pid_brzina_m1+0x140>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	dd03      	ble.n	8001028 <pid_brzina_m1+0xd8>
	{
		smer = 2;
 8001020:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <pid_brzina_m1+0x154>)
 8001022:	2202      	movs	r2, #2
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e002      	b.n	800102e <pid_brzina_m1+0xde>
	}
	else
	{

		smer = 1;
 8001028:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <pid_brzina_m1+0x154>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
	}

	//TIM16->CCR2 = (uint16_t)fabs(u_m1+2000.0);
	temp_pid = (uint16_t)fabs(u_m1+2000.0);
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <pid_brzina_m1+0x140>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa30 	bl	8000498 <__aeabi_f2d>
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <pid_brzina_m1+0x158>)
 800103e:	f7ff f8cd 	bl	80001dc <__adddf3>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4614      	mov	r4, r2
 8001048:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800104c:	4620      	mov	r0, r4
 800104e:	4629      	mov	r1, r5
 8001050:	f7ff fd3c 	bl	8000acc <__aeabi_d2uiz>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <pid_brzina_m1+0x15c>)
 800105a:	801a      	strh	r2, [r3, #0]
	motor1_init(smer, temp_pid);
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <pid_brzina_m1+0x154>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <pid_brzina_m1+0x15c>)
 8001062:	8812      	ldrh	r2, [r2, #0]
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fdbc 	bl	8000be4 <motor1_init>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bdb0      	pop	{r4, r5, r7, pc}
 8001074:	20000070 	.word	0x20000070
 8001078:	20000068 	.word	0x20000068
 800107c:	2000006c 	.word	0x2000006c
 8001080:	20000008 	.word	0x20000008
 8001084:	20000074 	.word	0x20000074
 8001088:	2000000c 	.word	0x2000000c
 800108c:	20000078 	.word	0x20000078
 8001090:	2000007c 	.word	0x2000007c
 8001094:	44f9e000 	.word	0x44f9e000
 8001098:	44f9e000 	.word	0x44f9e000
 800109c:	c4f9e000 	.word	0xc4f9e000
 80010a0:	c4f9e000 	.word	0xc4f9e000
 80010a4:	2000009a 	.word	0x2000009a
 80010a8:	409f4000 	.word	0x409f4000
 80010ac:	20000098 	.word	0x20000098

080010b0 <pid_brzina_m2>:

void pid_brzina_m2(float ref)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	ed87 0a01 	vstr	s0, [r7, #4]
	merena_m2 = odometrija_brzina_l();
 80010ba:	f7ff ff3b 	bl	8000f34 <odometrija_brzina_l>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	4b44      	ldr	r3, [pc, #272]	@ (80011d4 <pid_brzina_m2+0x124>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
	e_m2 =  ref  - merena_m2;
 80010c8:	4b42      	ldr	r3, [pc, #264]	@ (80011d4 <pid_brzina_m2+0x124>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <pid_brzina_m2+0x128>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]

	u_p_m2 = kp * (e_m2 - e_pre_m2);
 80010dc:	4b3e      	ldr	r3, [pc, #248]	@ (80011d8 <pid_brzina_m2+0x128>)
 80010de:	ed93 7a00 	vldr	s14, [r3]
 80010e2:	4b3e      	ldr	r3, [pc, #248]	@ (80011dc <pid_brzina_m2+0x12c>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ec:	4b3c      	ldr	r3, [pc, #240]	@ (80011e0 <pid_brzina_m2+0x130>)
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	4b3b      	ldr	r3, [pc, #236]	@ (80011e4 <pid_brzina_m2+0x134>)
 80010f8:	edc3 7a00 	vstr	s15, [r3]
	u_i_m2 = ki * e_m2;
 80010fc:	4b3a      	ldr	r3, [pc, #232]	@ (80011e8 <pid_brzina_m2+0x138>)
 80010fe:	ed93 7a00 	vldr	s14, [r3]
 8001102:	4b35      	ldr	r3, [pc, #212]	@ (80011d8 <pid_brzina_m2+0x128>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110c:	4b37      	ldr	r3, [pc, #220]	@ (80011ec <pid_brzina_m2+0x13c>)
 800110e:	edc3 7a00 	vstr	s15, [r3]
	u_m2 = u_m2 + u_p_m2 + u_i_m2;
 8001112:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <pid_brzina_m2+0x140>)
 8001114:	ed93 7a00 	vldr	s14, [r3]
 8001118:	4b32      	ldr	r3, [pc, #200]	@ (80011e4 <pid_brzina_m2+0x134>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001122:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <pid_brzina_m2+0x13c>)
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <pid_brzina_m2+0x140>)
 800112e:	edc3 7a00 	vstr	s15, [r3]

	e_pre_m2 = e_m2;
 8001132:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <pid_brzina_m2+0x128>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a29      	ldr	r2, [pc, #164]	@ (80011dc <pid_brzina_m2+0x12c>)
 8001138:	6013      	str	r3, [r2, #0]

	//saturacija
	if(u_m2 > 1999.0)
 800113a:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <pid_brzina_m2+0x140>)
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80011f4 <pid_brzina_m2+0x144>
 8001144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	dd03      	ble.n	8001156 <pid_brzina_m2+0xa6>
	{
		u_m2 = 1999.0;
 800114e:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <pid_brzina_m2+0x140>)
 8001150:	4a29      	ldr	r2, [pc, #164]	@ (80011f8 <pid_brzina_m2+0x148>)
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e00c      	b.n	8001170 <pid_brzina_m2+0xc0>
	}
	else if(u_m2 < -1999.0)
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <pid_brzina_m2+0x140>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80011fc <pid_brzina_m2+0x14c>
 8001160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001168:	d502      	bpl.n	8001170 <pid_brzina_m2+0xc0>
	{
		u_m2 = -1999.0;
 800116a:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <pid_brzina_m2+0x140>)
 800116c:	4a24      	ldr	r2, [pc, #144]	@ (8001200 <pid_brzina_m2+0x150>)
 800116e:	601a      	str	r2, [r3, #0]
	}

	if(u_m2 > 0)
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <pid_brzina_m2+0x140>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	dd03      	ble.n	8001188 <pid_brzina_m2+0xd8>
	{
		smer = 1;
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <pid_brzina_m2+0x154>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e002      	b.n	800118e <pid_brzina_m2+0xde>
	}
	else
	{
		smer = 2;
 8001188:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <pid_brzina_m2+0x154>)
 800118a:	2202      	movs	r2, #2
 800118c:	701a      	strb	r2, [r3, #0]
	}

	temp_pid = (uint16_t)fabs(u_m1+2000.0);
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <pid_brzina_m2+0x158>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f980 	bl	8000498 <__aeabi_f2d>
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <pid_brzina_m2+0x15c>)
 800119e:	f7ff f81d 	bl	80001dc <__adddf3>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4614      	mov	r4, r2
 80011a8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7ff fc8c 	bl	8000acc <__aeabi_d2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <pid_brzina_m2+0x160>)
 80011ba:	801a      	strh	r2, [r3, #0]
		motor2_init(smer, temp_pid);
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <pid_brzina_m2+0x154>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <pid_brzina_m2+0x160>)
 80011c2:	8812      	ldrh	r2, [r2, #0]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fd3e 	bl	8000c48 <motor2_init>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bdb0      	pop	{r4, r5, r7, pc}
 80011d4:	20000088 	.word	0x20000088
 80011d8:	20000080 	.word	0x20000080
 80011dc:	20000084 	.word	0x20000084
 80011e0:	20000008 	.word	0x20000008
 80011e4:	2000008c 	.word	0x2000008c
 80011e8:	2000000c 	.word	0x2000000c
 80011ec:	20000090 	.word	0x20000090
 80011f0:	20000094 	.word	0x20000094
 80011f4:	44f9e000 	.word	0x44f9e000
 80011f8:	44f9e000 	.word	0x44f9e000
 80011fc:	c4f9e000 	.word	0xc4f9e000
 8001200:	c4f9e000 	.word	0xc4f9e000
 8001204:	2000009a 	.word	0x2000009a
 8001208:	2000007c 	.word	0x2000007c
 800120c:	409f4000 	.word	0x409f4000
 8001210:	20000098 	.word	0x20000098

08001214 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800121e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001220:	4907      	ldr	r1, [pc, #28]	@ (8001240 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800122a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4013      	ands	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000

08001244 <LL_GPIO_ResetOutputPin>:
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff ffcc 	bl	8001214 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800127c:	2002      	movs	r0, #2
 800127e:	f7ff ffc9 	bl	8001214 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001282:	2130      	movs	r1, #48	@ 0x30
 8001284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001288:	f7ff ffdc 	bl	8001244 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 800128c:	2130      	movs	r1, #48	@ 0x30
 800128e:	4818      	ldr	r0, [pc, #96]	@ (80012f0 <MX_GPIO_Init+0x90>)
 8001290:	f7ff ffd8 	bl	8001244 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001294:	2330      	movs	r3, #48	@ 0x30
 8001296:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001298:	2301      	movs	r3, #1
 800129a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b0:	f002 fae5 	bl	800387e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80012b4:	23c1      	movs	r3, #193	@ 0xc1
 80012b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	480a      	ldr	r0, [pc, #40]	@ (80012f0 <MX_GPIO_Init+0x90>)
 80012c6:	f002 fada 	bl	800387e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80012ca:	2330      	movs	r3, #48	@ 0x30
 80012cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ce:	2301      	movs	r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <MX_GPIO_Init+0x90>)
 80012e4:	f002 facb 	bl	800387e <LL_GPIO_Init>

}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	48000400 	.word	0x48000400

080012f4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <LL_RCC_HSI_Enable+0x1c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <LL_RCC_HSI_Enable+0x1c>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <LL_RCC_HSI_IsReady+0x24>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001324:	d101      	bne.n	800132a <LL_RCC_HSI_IsReady+0x16>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_RCC_HSI_IsReady+0x18>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001344:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	061b      	lsls	r3, r3, #24
 8001350:	4904      	ldr	r1, [pc, #16]	@ (8001364 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <LL_RCC_SetSysClkSource+0x24>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f023 0203 	bic.w	r2, r3, #3
 8001378:	4904      	ldr	r1, [pc, #16]	@ (800138c <LL_RCC_SetSysClkSource+0x24>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	608b      	str	r3, [r1, #8]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000

08001390 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <LL_RCC_GetSysClkSource+0x18>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <LL_RCC_SetAHBPrescaler+0x24>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013bc:	4904      	ldr	r1, [pc, #16]	@ (80013d0 <LL_RCC_SetAHBPrescaler+0x24>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	608b      	str	r3, [r1, #8]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000

080013d4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013e4:	4904      	ldr	r1, [pc, #16]	@ (80013f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	608b      	str	r3, [r1, #8]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000

080013fc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800140c:	4904      	ldr	r1, [pc, #16]	@ (8001420 <LL_RCC_SetAPB2Prescaler+0x24>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4313      	orrs	r3, r2
 8001412:	608b      	str	r3, [r1, #8]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000

08001424 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <LL_RCC_PLL_Enable+0x1c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <LL_RCC_PLL_Enable+0x1c>)
 800142e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <LL_RCC_PLL_IsReady+0x24>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001450:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001454:	d101      	bne.n	800145a <LL_RCC_PLL_IsReady+0x16>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <LL_RCC_PLL_IsReady+0x18>
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000

0800146c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001480:	4013      	ands	r3, r2
 8001482:	68f9      	ldr	r1, [r7, #12]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	4311      	orrs	r1, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	0212      	lsls	r2, r2, #8
 800148c:	4311      	orrs	r1, r2
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	4904      	ldr	r1, [pc, #16]	@ (80014a4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001494:	4313      	orrs	r3, r2
 8001496:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	f9ff808c 	.word	0xf9ff808c

080014ac <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80014b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <LL_FLASH_SetLatency+0x24>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 0207 	bic.w	r2, r3, #7
 80014dc:	4904      	ldr	r1, [pc, #16]	@ (80014f0 <LL_FLASH_SetLatency+0x24>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40022000 	.word	0x40022000

080014f4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <LL_FLASH_GetLatency+0x18>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0307 	and.w	r3, r3, #7
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000

08001510 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001520:	4904      	ldr	r1, [pc, #16]	@ (8001534 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40007000 	.word	0x40007000

08001538 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001548:	d101      	bne.n	800154e <LL_PWR_IsActiveFlag_VOS+0x16>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_PWR_IsActiveFlag_VOS+0x18>
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40007000 	.word	0x40007000

08001560 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	60da      	str	r2, [r3, #12]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f000 fed5 	bl	8002352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f822 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f7ff fe58 	bl	8001260 <MX_GPIO_Init>
  MX_TIM6_Init();
 80015b0:	f000 fcac 	bl	8001f0c <MX_TIM6_Init>
  MX_TIM1_Init();
 80015b4:	f000 fba6 	bl	8001d04 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015b8:	f000 fc24 	bl	8001e04 <MX_TIM2_Init>
  MX_TIM15_Init();
 80015bc:	f000 fce0 	bl	8001f80 <MX_TIM15_Init>
  MX_TIM16_Init();
 80015c0:	f000 fd62 	bl	8002088 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM1);
 80015c4:	4808      	ldr	r0, [pc, #32]	@ (80015e8 <main+0x48>)
 80015c6:	f7ff ffcb 	bl	8001560 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM2);
 80015ca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80015ce:	f7ff ffc7 	bl	8001560 <LL_TIM_EnableCounter>
 LL_TIM_EnableIT_UPDATE(TIM6);
 80015d2:	4806      	ldr	r0, [pc, #24]	@ (80015ec <main+0x4c>)
 80015d4:	f7ff ffd4 	bl	8001580 <LL_TIM_EnableIT_UPDATE>
 LL_TIM_EnableCounter(TIM6);
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <main+0x4c>)
 80015da:	f7ff ffc1 	bl	8001560 <LL_TIM_EnableCounter>
// HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
//  TIM16->CCR1 = TIM16->ARR/2;



  odometrija_init();
 80015de:	f7ff fb63 	bl	8000ca8 <odometrija_init>
  //motor2_init(1,70);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015e2:	bf00      	nop
 80015e4:	e7fd      	b.n	80015e2 <main+0x42>
 80015e6:	bf00      	nop
 80015e8:	40012c00 	.word	0x40012c00
 80015ec:	40001000 	.word	0x40001000

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80015f4:	2004      	movs	r0, #4
 80015f6:	f7ff ff69 	bl	80014cc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 80015fa:	bf00      	nop
 80015fc:	f7ff ff7a 	bl	80014f4 <LL_FLASH_GetLatency>
 8001600:	4603      	mov	r3, r0
 8001602:	2b04      	cmp	r3, #4
 8001604:	d1fa      	bne.n	80015fc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800160a:	f7ff ff81 	bl	8001510 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800160e:	bf00      	nop
 8001610:	f7ff ff92 	bl	8001538 <LL_PWR_IsActiveFlag_VOS>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1fa      	bne.n	8001610 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSI_Enable();
 800161a:	f7ff fe6b 	bl	80012f4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800161e:	bf00      	nop
 8001620:	f7ff fe78 	bl	8001314 <LL_RCC_HSI_IsReady>
 8001624:	4603      	mov	r3, r0
 8001626:	2b01      	cmp	r3, #1
 8001628:	d1fa      	bne.n	8001620 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800162a:	2010      	movs	r0, #16
 800162c:	f7ff fe86 	bl	800133c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 8001630:	2300      	movs	r3, #0
 8001632:	220a      	movs	r2, #10
 8001634:	2100      	movs	r1, #0
 8001636:	2002      	movs	r0, #2
 8001638:	f7ff ff18 	bl	800146c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 800163c:	f7ff ff36 	bl	80014ac <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001640:	f7ff fef0 	bl	8001424 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001644:	bf00      	nop
 8001646:	f7ff fefd 	bl	8001444 <LL_RCC_PLL_IsReady>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d1fa      	bne.n	8001646 <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001650:	2003      	movs	r0, #3
 8001652:	f7ff fe89 	bl	8001368 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001656:	bf00      	nop
 8001658:	f7ff fe9a 	bl	8001390 <LL_RCC_GetSysClkSource>
 800165c:	4603      	mov	r3, r0
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d1fa      	bne.n	8001658 <SystemClock_Config+0x68>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fea2 	bl	80013ac <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff feb3 	bl	80013d4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800166e:	2000      	movs	r0, #0
 8001670:	f7ff fec4 	bl	80013fc <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8001674:	4806      	ldr	r0, [pc, #24]	@ (8001690 <SystemClock_Config+0xa0>)
 8001676:	f002 fa09 	bl	8003a8c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800167a:	200f      	movs	r0, #15
 800167c:	f000 fe82 	bl	8002384 <HAL_InitTick>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001686:	f000 f805 	bl	8001694 <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	04c4b400 	.word	0x04c4b400

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <Error_Handler+0x8>

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_MspInit+0x44>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016aa:	4a0e      	ldr	r2, [pc, #56]	@ (80016e4 <HAL_MspInit+0x44>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <HAL_MspInit+0x44>)
 80016b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <HAL_MspInit+0x44>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	4a08      	ldr	r2, [pc, #32]	@ (80016e4 <HAL_MspInit+0x44>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_MspInit+0x44>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000

080016e8 <LL_TIM_ClearFlag_UPDATE>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f06f 0201 	mvn.w	r2, #1
 80016f6:	611a      	str	r2, [r3, #16]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800172e:	bf00      	nop
 8001730:	e7fd      	b.n	800172e <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	bf00      	nop
 8001738:	e7fd      	b.n	8001736 <HardFault_Handler+0x4>

0800173a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173e:	bf00      	nop
 8001740:	e7fd      	b.n	800173e <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	bf00      	nop
 8001748:	e7fd      	b.n	8001746 <BusFault_Handler+0x4>

0800174a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174e:	bf00      	nop
 8001750:	e7fd      	b.n	800174e <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 fe3c 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
 if (LL_TIM_IsActiveFlag_UPDATE(TIM6))
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <TIM6_DAC_IRQHandler+0x38>)
 800178e:	f7ff ffb9 	bl	8001704 <LL_TIM_IsActiveFlag_UPDATE>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d011      	beq.n	80017bc <TIM6_DAC_IRQHandler+0x34>
 {
	 LL_TIM_ClearFlag_UPDATE(TIM6);
 8001798:	4809      	ldr	r0, [pc, #36]	@ (80017c0 <TIM6_DAC_IRQHandler+0x38>)
 800179a:	f7ff ffa5 	bl	80016e8 <LL_TIM_ClearFlag_UPDATE>

	 sys_time ++;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <TIM6_DAC_IRQHandler+0x3c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	4a07      	ldr	r2, [pc, #28]	@ (80017c4 <TIM6_DAC_IRQHandler+0x3c>)
 80017a6:	6013      	str	r3, [r2, #0]
	 odometrija();
 80017a8:	f7ff face 	bl	8000d48 <odometrija>


	 pid_brzina_m1(3.5);
 80017ac:	eeb0 0a0c 	vmov.f32	s0, #12	@ 0x40600000  3.5
 80017b0:	f7ff fbce 	bl	8000f50 <pid_brzina_m1>
	pid_brzina_m2(3.5);
 80017b4:	eeb0 0a0c 	vmov.f32	s0, #12	@ 0x40600000  3.5
 80017b8:	f7ff fc7a 	bl	80010b0 <pid_brzina_m2>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40001000 	.word	0x40001000
 80017c4:	2000009c 	.word	0x2000009c

080017c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	@ (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	@ (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	@ (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	@ 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <LL_AHB2_GRP1_EnableClock>:
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800190a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800190c:	4907      	ldr	r1, [pc, #28]	@ (800192c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4313      	orrs	r3, r2
 8001912:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001916:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40021000 	.word	0x40021000

08001930 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <LL_APB1_GRP1_EnableClock+0x2c>)
 800193a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800193c:	4907      	ldr	r1, [pc, #28]	@ (800195c <LL_APB1_GRP1_EnableClock+0x2c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4313      	orrs	r3, r2
 8001942:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001946:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4013      	ands	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40021000 	.word	0x40021000

08001960 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <LL_APB2_GRP1_EnableClock+0x2c>)
 800196a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800196c:	4907      	ldr	r1, [pc, #28]	@ (800198c <LL_APB2_GRP1_EnableClock+0x2c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4313      	orrs	r3, r2
 8001972:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001976:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4013      	ands	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000

08001990 <LL_TIM_DisableARRPreload>:
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_TIM_IC_SetActiveInput>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d028      	beq.n	8001a14 <LL_TIM_IC_SetActiveInput+0x64>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d023      	beq.n	8001a10 <LL_TIM_IC_SetActiveInput+0x60>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d01e      	beq.n	8001a0c <LL_TIM_IC_SetActiveInput+0x5c>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b40      	cmp	r3, #64	@ 0x40
 80019d2:	d019      	beq.n	8001a08 <LL_TIM_IC_SetActiveInput+0x58>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019da:	d013      	beq.n	8001a04 <LL_TIM_IC_SetActiveInput+0x54>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e2:	d00d      	beq.n	8001a00 <LL_TIM_IC_SetActiveInput+0x50>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019ea:	d007      	beq.n	80019fc <LL_TIM_IC_SetActiveInput+0x4c>
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f2:	d101      	bne.n	80019f8 <LL_TIM_IC_SetActiveInput+0x48>
 80019f4:	2307      	movs	r3, #7
 80019f6:	e00e      	b.n	8001a16 <LL_TIM_IC_SetActiveInput+0x66>
 80019f8:	2308      	movs	r3, #8
 80019fa:	e00c      	b.n	8001a16 <LL_TIM_IC_SetActiveInput+0x66>
 80019fc:	2306      	movs	r3, #6
 80019fe:	e00a      	b.n	8001a16 <LL_TIM_IC_SetActiveInput+0x66>
 8001a00:	2305      	movs	r3, #5
 8001a02:	e008      	b.n	8001a16 <LL_TIM_IC_SetActiveInput+0x66>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e006      	b.n	8001a16 <LL_TIM_IC_SetActiveInput+0x66>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e004      	b.n	8001a16 <LL_TIM_IC_SetActiveInput+0x66>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <LL_TIM_IC_SetActiveInput+0x66>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <LL_TIM_IC_SetActiveInput+0x66>
 8001a14:	2300      	movs	r3, #0
 8001a16:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3318      	adds	r3, #24
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	4a0e      	ldr	r2, [pc, #56]	@ (8001a5c <LL_TIM_IC_SetActiveInput+0xac>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	440b      	add	r3, r1
 8001a26:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	490c      	ldr	r1, [pc, #48]	@ (8001a60 <LL_TIM_IC_SetActiveInput+0xb0>)
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
 8001a32:	4619      	mov	r1, r3
 8001a34:	2303      	movs	r3, #3
 8001a36:	408b      	lsls	r3, r1
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	7df9      	ldrb	r1, [r7, #23]
 8001a42:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <LL_TIM_IC_SetActiveInput+0xb0>)
 8001a44:	5c41      	ldrb	r1, [r0, r1]
 8001a46:	408b      	lsls	r3, r1
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	08004c28 	.word	0x08004c28
 8001a60:	08004c34 	.word	0x08004c34

08001a64 <LL_TIM_IC_SetPrescaler>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d028      	beq.n	8001ac8 <LL_TIM_IC_SetPrescaler+0x64>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d023      	beq.n	8001ac4 <LL_TIM_IC_SetPrescaler+0x60>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d01e      	beq.n	8001ac0 <LL_TIM_IC_SetPrescaler+0x5c>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b40      	cmp	r3, #64	@ 0x40
 8001a86:	d019      	beq.n	8001abc <LL_TIM_IC_SetPrescaler+0x58>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a8e:	d013      	beq.n	8001ab8 <LL_TIM_IC_SetPrescaler+0x54>
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a96:	d00d      	beq.n	8001ab4 <LL_TIM_IC_SetPrescaler+0x50>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a9e:	d007      	beq.n	8001ab0 <LL_TIM_IC_SetPrescaler+0x4c>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa6:	d101      	bne.n	8001aac <LL_TIM_IC_SetPrescaler+0x48>
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	e00e      	b.n	8001aca <LL_TIM_IC_SetPrescaler+0x66>
 8001aac:	2308      	movs	r3, #8
 8001aae:	e00c      	b.n	8001aca <LL_TIM_IC_SetPrescaler+0x66>
 8001ab0:	2306      	movs	r3, #6
 8001ab2:	e00a      	b.n	8001aca <LL_TIM_IC_SetPrescaler+0x66>
 8001ab4:	2305      	movs	r3, #5
 8001ab6:	e008      	b.n	8001aca <LL_TIM_IC_SetPrescaler+0x66>
 8001ab8:	2304      	movs	r3, #4
 8001aba:	e006      	b.n	8001aca <LL_TIM_IC_SetPrescaler+0x66>
 8001abc:	2303      	movs	r3, #3
 8001abe:	e004      	b.n	8001aca <LL_TIM_IC_SetPrescaler+0x66>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e002      	b.n	8001aca <LL_TIM_IC_SetPrescaler+0x66>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <LL_TIM_IC_SetPrescaler+0x66>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3318      	adds	r3, #24
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <LL_TIM_IC_SetPrescaler+0xac>)
 8001ad6:	5cd3      	ldrb	r3, [r2, r3]
 8001ad8:	440b      	add	r3, r1
 8001ada:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	490c      	ldr	r1, [pc, #48]	@ (8001b14 <LL_TIM_IC_SetPrescaler+0xb0>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	230c      	movs	r3, #12
 8001aea:	408b      	lsls	r3, r1
 8001aec:	43db      	mvns	r3, r3
 8001aee:	401a      	ands	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	7df9      	ldrb	r1, [r7, #23]
 8001af6:	4807      	ldr	r0, [pc, #28]	@ (8001b14 <LL_TIM_IC_SetPrescaler+0xb0>)
 8001af8:	5c41      	ldrb	r1, [r0, r1]
 8001afa:	408b      	lsls	r3, r1
 8001afc:	431a      	orrs	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	601a      	str	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	08004c28 	.word	0x08004c28
 8001b14:	08004c34 	.word	0x08004c34

08001b18 <LL_TIM_IC_SetFilter>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d028      	beq.n	8001b7c <LL_TIM_IC_SetFilter+0x64>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d023      	beq.n	8001b78 <LL_TIM_IC_SetFilter+0x60>
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d01e      	beq.n	8001b74 <LL_TIM_IC_SetFilter+0x5c>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b40      	cmp	r3, #64	@ 0x40
 8001b3a:	d019      	beq.n	8001b70 <LL_TIM_IC_SetFilter+0x58>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b42:	d013      	beq.n	8001b6c <LL_TIM_IC_SetFilter+0x54>
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4a:	d00d      	beq.n	8001b68 <LL_TIM_IC_SetFilter+0x50>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b52:	d007      	beq.n	8001b64 <LL_TIM_IC_SetFilter+0x4c>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5a:	d101      	bne.n	8001b60 <LL_TIM_IC_SetFilter+0x48>
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	e00e      	b.n	8001b7e <LL_TIM_IC_SetFilter+0x66>
 8001b60:	2308      	movs	r3, #8
 8001b62:	e00c      	b.n	8001b7e <LL_TIM_IC_SetFilter+0x66>
 8001b64:	2306      	movs	r3, #6
 8001b66:	e00a      	b.n	8001b7e <LL_TIM_IC_SetFilter+0x66>
 8001b68:	2305      	movs	r3, #5
 8001b6a:	e008      	b.n	8001b7e <LL_TIM_IC_SetFilter+0x66>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e006      	b.n	8001b7e <LL_TIM_IC_SetFilter+0x66>
 8001b70:	2303      	movs	r3, #3
 8001b72:	e004      	b.n	8001b7e <LL_TIM_IC_SetFilter+0x66>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e002      	b.n	8001b7e <LL_TIM_IC_SetFilter+0x66>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <LL_TIM_IC_SetFilter+0x66>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3318      	adds	r3, #24
 8001b84:	4619      	mov	r1, r3
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <LL_TIM_IC_SetFilter+0xac>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	440b      	add	r3, r1
 8001b8e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	490c      	ldr	r1, [pc, #48]	@ (8001bc8 <LL_TIM_IC_SetFilter+0xb0>)
 8001b98:	5ccb      	ldrb	r3, [r1, r3]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	23f0      	movs	r3, #240	@ 0xf0
 8001b9e:	408b      	lsls	r3, r1
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	0c1b      	lsrs	r3, r3, #16
 8001ba8:	7df9      	ldrb	r1, [r7, #23]
 8001baa:	4807      	ldr	r0, [pc, #28]	@ (8001bc8 <LL_TIM_IC_SetFilter+0xb0>)
 8001bac:	5c41      	ldrb	r1, [r0, r1]
 8001bae:	408b      	lsls	r3, r1
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	08004c28 	.word	0x08004c28
 8001bc8:	08004c34 	.word	0x08004c34

08001bcc <LL_TIM_IC_SetPolarity>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d028      	beq.n	8001c30 <LL_TIM_IC_SetPolarity+0x64>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d023      	beq.n	8001c2c <LL_TIM_IC_SetPolarity+0x60>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d01e      	beq.n	8001c28 <LL_TIM_IC_SetPolarity+0x5c>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b40      	cmp	r3, #64	@ 0x40
 8001bee:	d019      	beq.n	8001c24 <LL_TIM_IC_SetPolarity+0x58>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bf6:	d013      	beq.n	8001c20 <LL_TIM_IC_SetPolarity+0x54>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bfe:	d00d      	beq.n	8001c1c <LL_TIM_IC_SetPolarity+0x50>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c06:	d007      	beq.n	8001c18 <LL_TIM_IC_SetPolarity+0x4c>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c0e:	d101      	bne.n	8001c14 <LL_TIM_IC_SetPolarity+0x48>
 8001c10:	2307      	movs	r3, #7
 8001c12:	e00e      	b.n	8001c32 <LL_TIM_IC_SetPolarity+0x66>
 8001c14:	2308      	movs	r3, #8
 8001c16:	e00c      	b.n	8001c32 <LL_TIM_IC_SetPolarity+0x66>
 8001c18:	2306      	movs	r3, #6
 8001c1a:	e00a      	b.n	8001c32 <LL_TIM_IC_SetPolarity+0x66>
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	e008      	b.n	8001c32 <LL_TIM_IC_SetPolarity+0x66>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e006      	b.n	8001c32 <LL_TIM_IC_SetPolarity+0x66>
 8001c24:	2303      	movs	r3, #3
 8001c26:	e004      	b.n	8001c32 <LL_TIM_IC_SetPolarity+0x66>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e002      	b.n	8001c32 <LL_TIM_IC_SetPolarity+0x66>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <LL_TIM_IC_SetPolarity+0x66>
 8001c30:	2300      	movs	r3, #0
 8001c32:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a1a      	ldr	r2, [r3, #32]
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	490b      	ldr	r1, [pc, #44]	@ (8001c68 <LL_TIM_IC_SetPolarity+0x9c>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	230a      	movs	r3, #10
 8001c42:	408b      	lsls	r3, r1
 8001c44:	43db      	mvns	r3, r3
 8001c46:	401a      	ands	r2, r3
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	4907      	ldr	r1, [pc, #28]	@ (8001c68 <LL_TIM_IC_SetPolarity+0x9c>)
 8001c4c:	5ccb      	ldrb	r3, [r1, r3]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	408b      	lsls	r3, r1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	621a      	str	r2, [r3, #32]
}
 8001c5a:	bf00      	nop
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	08004c40 	.word	0x08004c40

08001c6c <LL_TIM_SetEncoderMode>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7e:	f023 0307 	bic.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	609a      	str	r2, [r3, #8]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_TIM_SetTriggerOutput>:
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	605a      	str	r2, [r3, #4]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_TIM_SetTriggerOutput2>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	605a      	str	r2, [r3, #4]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_TIM_DisableMasterSlaveMode>:
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	@ 0x30
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
 8001d28:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001d2a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d2e:	f7ff fe17 	bl	8001960 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff fde4 	bl	8001900 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001d38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d5a:	f001 fd90 	bl	800387e <LL_GPIO_Init>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001d66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4821      	ldr	r0, [pc, #132]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001d7c:	f001 fe28 	bl	80039d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001d80:	481f      	ldr	r0, [pc, #124]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001d82:	f7ff fe05 	bl	8001990 <LL_TIM_DisableARRPreload>
  LL_TIM_SetEncoderMode(TIM1, LL_TIM_ENCODERMODE_X4_TI12);
 8001d86:	2103      	movs	r1, #3
 8001d88:	481d      	ldr	r0, [pc, #116]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001d8a:	f7ff ff6f 	bl	8001c6c <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001d8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d92:	2101      	movs	r1, #1
 8001d94:	481a      	ldr	r0, [pc, #104]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001d96:	f7ff fe0b 	bl	80019b0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4818      	ldr	r0, [pc, #96]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001da0:	f7ff fe60 	bl	8001a64 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2101      	movs	r1, #1
 8001da8:	4815      	ldr	r0, [pc, #84]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001daa:	f7ff feb5 	bl	8001b18 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2101      	movs	r1, #1
 8001db2:	4813      	ldr	r0, [pc, #76]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001db4:	f7ff ff0a 	bl	8001bcc <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001db8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	4810      	ldr	r0, [pc, #64]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001dc0:	f7ff fdf6 	bl	80019b0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2110      	movs	r1, #16
 8001dc8:	480d      	ldr	r0, [pc, #52]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001dca:	f7ff fe4b 	bl	8001a64 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	480b      	ldr	r0, [pc, #44]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001dd4:	f7ff fea0 	bl	8001b18 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2110      	movs	r1, #16
 8001ddc:	4808      	ldr	r0, [pc, #32]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001dde:	f7ff fef5 	bl	8001bcc <LL_TIM_IC_SetPolarity>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001de2:	2100      	movs	r1, #0
 8001de4:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001de6:	f7ff ff56 	bl	8001c96 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8001dea:	2100      	movs	r1, #0
 8001dec:	4804      	ldr	r0, [pc, #16]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001dee:	f7ff ff65 	bl	8001cbc <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001df2:	4803      	ldr	r0, [pc, #12]	@ (8001e00 <MX_TIM1_Init+0xfc>)
 8001df4:	f7ff ff75 	bl	8001ce2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3730      	adds	r7, #48	@ 0x30
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40012c00 	.word	0x40012c00

08001e04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
 8001e28:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7ff fd80 	bl	8001930 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7ff fd65 	bl	8001900 <LL_AHB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA0   ------> TIM2_CH1
  PA1   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001e36:	2303      	movs	r3, #3
 8001e38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e56:	f001 fd12 	bl	800387e <LL_GPIO_Init>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e76:	f001 fdab 	bl	80039d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001e7a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e7e:	f7ff fd87 	bl	8001990 <LL_TIM_DisableARRPreload>
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8001e82:	2103      	movs	r1, #3
 8001e84:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e88:	f7ff fef0 	bl	8001c6c <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001e8c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e90:	2101      	movs	r1, #1
 8001e92:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e96:	f7ff fd8b 	bl	80019b0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ea2:	f7ff fddf 	bl	8001a64 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001eae:	f7ff fe33 	bl	8001b18 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001eba:	f7ff fe87 	bl	8001bcc <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001ebe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ec8:	f7ff fd72 	bl	80019b0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2110      	movs	r1, #16
 8001ed0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ed4:	f7ff fdc6 	bl	8001a64 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2110      	movs	r1, #16
 8001edc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ee0:	f7ff fe1a 	bl	8001b18 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001eec:	f7ff fe6e 	bl	8001bcc <LL_TIM_IC_SetPolarity>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ef6:	f7ff fece 	bl	8001c96 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001efa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001efe:	f7ff fef0 	bl	8001ce2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	3730      	adds	r7, #48	@ 0x30
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001f20:	2010      	movs	r0, #16
 8001f22:	f7ff fd05 	bl	8001930 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f26:	f7ff fc61 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fcb1 	bl	8001898 <NVIC_EncodePriority>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	2036      	movs	r0, #54	@ 0x36
 8001f3c:	f7ff fc82 	bl	8001844 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f40:	2036      	movs	r0, #54	@ 0x36
 8001f42:	f7ff fc61 	bl	8001808 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 79;
 8001f46:	234f      	movs	r3, #79	@ 0x4f
 8001f48:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8001f4e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001f52:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	4808      	ldr	r0, [pc, #32]	@ (8001f7c <MX_TIM6_Init+0x70>)
 8001f5a:	f001 fd39 	bl	80039d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001f5e:	4807      	ldr	r0, [pc, #28]	@ (8001f7c <MX_TIM6_Init+0x70>)
 8001f60:	f7ff fd16 	bl	8001990 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001f64:	2100      	movs	r1, #0
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <MX_TIM6_Init+0x70>)
 8001f68:	f7ff fe95 	bl	8001c96 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <MX_TIM6_Init+0x70>)
 8001f6e:	f7ff feb8 	bl	8001ce2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40001000 	.word	0x40001000

08001f80 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b096      	sub	sp, #88	@ 0x58
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	611a      	str	r2, [r3, #16]
 8001fa2:	615a      	str	r2, [r3, #20]
 8001fa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	222c      	movs	r2, #44	@ 0x2c
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 fd7d 	bl	8003aac <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001fb2:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <MX_TIM15_Init+0x100>)
 8001fb4:	4a33      	ldr	r2, [pc, #204]	@ (8002084 <MX_TIM15_Init+0x104>)
 8001fb6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001fb8:	4b31      	ldr	r3, [pc, #196]	@ (8002080 <MX_TIM15_Init+0x100>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b30      	ldr	r3, [pc, #192]	@ (8002080 <MX_TIM15_Init+0x100>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4000-1;
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002080 <MX_TIM15_Init+0x100>)
 8001fc6:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001fca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <MX_TIM15_Init+0x100>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <MX_TIM15_Init+0x100>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fd8:	4b29      	ldr	r3, [pc, #164]	@ (8002080 <MX_TIM15_Init+0x100>)
 8001fda:	2280      	movs	r2, #128	@ 0x80
 8001fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001fde:	4828      	ldr	r0, [pc, #160]	@ (8002080 <MX_TIM15_Init+0x100>)
 8001fe0:	f000 fcc7 	bl	8002972 <HAL_TIM_PWM_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001fea:	f7ff fb53 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ff6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4820      	ldr	r0, [pc, #128]	@ (8002080 <MX_TIM15_Init+0x100>)
 8001ffe:	f001 fa15 	bl	800342c <HAL_TIMEx_MasterConfigSynchronization>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002008:	f7ff fb44 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200c:	2360      	movs	r3, #96	@ 0x60
 800200e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002014:	2300      	movs	r3, #0
 8002016:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002018:	2300      	movs	r3, #0
 800201a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002024:	2300      	movs	r3, #0
 8002026:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002028:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800202c:	2200      	movs	r2, #0
 800202e:	4619      	mov	r1, r3
 8002030:	4813      	ldr	r0, [pc, #76]	@ (8002080 <MX_TIM15_Init+0x100>)
 8002032:	f000 fdd3 	bl	8002bdc <HAL_TIM_PWM_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800203c:	f7ff fb2a 	bl	8001694 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002058:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4807      	ldr	r0, [pc, #28]	@ (8002080 <MX_TIM15_Init+0x100>)
 8002064:	f001 fa48 	bl	80034f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800206e:	f7ff fb11 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002072:	4803      	ldr	r0, [pc, #12]	@ (8002080 <MX_TIM15_Init+0x100>)
 8002074:	f000 f8c0 	bl	80021f8 <HAL_TIM_MspPostInit>

}
 8002078:	bf00      	nop
 800207a:	3758      	adds	r7, #88	@ 0x58
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200000a0 	.word	0x200000a0
 8002084:	40014000 	.word	0x40014000

08002088 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b092      	sub	sp, #72	@ 0x48
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800208e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	615a      	str	r2, [r3, #20]
 80020a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020a2:	463b      	mov	r3, r7
 80020a4:	222c      	movs	r2, #44	@ 0x2c
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f001 fcff 	bl	8003aac <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80020ae:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <MX_TIM16_Init+0xe8>)
 80020b0:	4a30      	ldr	r2, [pc, #192]	@ (8002174 <MX_TIM16_Init+0xec>)
 80020b2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80020b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <MX_TIM16_Init+0xe8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <MX_TIM16_Init+0xe8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4000-1;
 80020c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <MX_TIM16_Init+0xe8>)
 80020c2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80020c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c8:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <MX_TIM16_Init+0xe8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <MX_TIM16_Init+0xe8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <MX_TIM16_Init+0xe8>)
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80020da:	4825      	ldr	r0, [pc, #148]	@ (8002170 <MX_TIM16_Init+0xe8>)
 80020dc:	f000 fbf2 	bl	80028c4 <HAL_TIM_Base_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80020e6:	f7ff fad5 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80020ea:	4821      	ldr	r0, [pc, #132]	@ (8002170 <MX_TIM16_Init+0xe8>)
 80020ec:	f000 fc41 	bl	8002972 <HAL_TIM_PWM_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80020f6:	f7ff facd 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fa:	2360      	movs	r3, #96	@ 0x60
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002102:	2300      	movs	r3, #0
 8002104:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002106:	2300      	movs	r3, #0
 8002108:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002116:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211a:	2200      	movs	r2, #0
 800211c:	4619      	mov	r1, r3
 800211e:	4814      	ldr	r0, [pc, #80]	@ (8002170 <MX_TIM16_Init+0xe8>)
 8002120:	f000 fd5c 	bl	8002bdc <HAL_TIM_PWM_ConfigChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800212a:	f7ff fab3 	bl	8001694 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002146:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800214c:	463b      	mov	r3, r7
 800214e:	4619      	mov	r1, r3
 8002150:	4807      	ldr	r0, [pc, #28]	@ (8002170 <MX_TIM16_Init+0xe8>)
 8002152:	f001 f9d1 	bl	80034f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800215c:	f7ff fa9a 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002160:	4803      	ldr	r0, [pc, #12]	@ (8002170 <MX_TIM16_Init+0xe8>)
 8002162:	f000 f849 	bl	80021f8 <HAL_TIM_MspPostInit>

}
 8002166:	bf00      	nop
 8002168:	3748      	adds	r7, #72	@ 0x48
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200000ec 	.word	0x200000ec
 8002174:	40014400 	.word	0x40014400

08002178 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_TIM_PWM_MspInit+0x38>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10b      	bne.n	80021a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6613      	str	r3, [r2, #96]	@ 0x60
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40014000 	.word	0x40014000
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <HAL_TIM_Base_MspInit+0x38>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10b      	bne.n	80021e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_TIM_Base_MspInit+0x3c>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ce:	4a09      	ldr	r2, [pc, #36]	@ (80021f4 <HAL_TIM_Base_MspInit+0x3c>)
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <HAL_TIM_Base_MspInit+0x3c>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40014400 	.word	0x40014400
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a23      	ldr	r2, [pc, #140]	@ (80022a4 <HAL_TIM_MspPostInit+0xac>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d11d      	bne.n	8002256 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <HAL_TIM_MspPostInit+0xb0>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	4a22      	ldr	r2, [pc, #136]	@ (80022a8 <HAL_TIM_MspPostInit+0xb0>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002226:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_TIM_MspPostInit+0xb0>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002232:	2304      	movs	r3, #4
 8002234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002242:	230e      	movs	r3, #14
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002250:	f000 f9ce 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002254:	e021      	b.n	800229a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM16)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <HAL_TIM_MspPostInit+0xb4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d11c      	bne.n	800229a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_TIM_MspPostInit+0xb0>)
 8002262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002264:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_TIM_MspPostInit+0xb0>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226c:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_TIM_MspPostInit+0xb0>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002278:	2340      	movs	r3, #64	@ 0x40
 800227a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002288:	230e      	movs	r3, #14
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002296:	f000 f9ab 	bl	80025f0 <HAL_GPIO_Init>
}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	@ 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40014000 	.word	0x40014000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40014400 	.word	0x40014400

080022b0 <tim1_brzina>:
  /* USER CODE END TIM16_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int16_t tim1_brzina() {
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
    int16_t brzina = (int16_t)(TIM1->CNT);
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <tim1_brzina+0x24>)
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	80fb      	strh	r3, [r7, #6]
    TIM1->CNT = 0;  // Reset brojača za sledeće očitavanje brzine
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <tim1_brzina+0x24>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24
    return brzina;
 80022c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40012c00 	.word	0x40012c00

080022d8 <tim2_brzina>:


int16_t tim2_brzina() {
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
    int16_t brzina = (int16_t)(TIM2->CNT);
 80022de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	80fb      	strh	r3, [r7, #6]
    TIM2->CNT = 0;  // Reset brojača za sledeće očitavanje brzine
 80022e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
    return brzina;
 80022ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002304:	f7ff fa60 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002308:	480c      	ldr	r0, [pc, #48]	@ (800233c <LoopForever+0x6>)
  ldr r1, =_edata
 800230a:	490d      	ldr	r1, [pc, #52]	@ (8002340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800230c:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <LoopForever+0xe>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002320:	4c0a      	ldr	r4, [pc, #40]	@ (800234c <LoopForever+0x16>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800232e:	f001 fbc5 	bl	8003abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002332:	f7ff f935 	bl	80015a0 <main>

08002336 <LoopForever>:

LoopForever:
    b LoopForever
 8002336:	e7fe      	b.n	8002336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002338:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002344:	08004e30 	.word	0x08004e30
  ldr r2, =_sbss
 8002348:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800234c:	2000013c 	.word	0x2000013c

08002350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC1_IRQHandler>

08002352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 f913 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002362:	200f      	movs	r0, #15
 8002364:	f000 f80e 	bl	8002384 <HAL_InitTick>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	71fb      	strb	r3, [r7, #7]
 8002372:	e001      	b.n	8002378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002374:	f7ff f994 	bl	80016a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002378:	79fb      	ldrb	r3, [r7, #7]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002390:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <HAL_InitTick+0x6c>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d023      	beq.n	80023e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002398:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <HAL_InitTick+0x70>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_InitTick+0x6c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f911 	bl	80025d6 <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10f      	bne.n	80023da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b0f      	cmp	r3, #15
 80023be:	d809      	bhi.n	80023d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c0:	2200      	movs	r2, #0
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f000 f8e9 	bl	800259e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023cc:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <HAL_InitTick+0x74>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e007      	b.n	80023e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e004      	b.n	80023e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	e001      	b.n	80023e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000018 	.word	0x20000018
 80023f4:	20000010 	.word	0x20000010
 80023f8:	20000014 	.word	0x20000014

080023fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_IncTick+0x20>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_IncTick+0x24>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <HAL_IncTick+0x24>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000018 	.word	0x20000018
 8002420:	20000138 	.word	0x20000138

08002424 <__NVIC_SetPriorityGrouping>:
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002440:	4013      	ands	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800244c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002456:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60d3      	str	r3, [r2, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_GetPriorityGrouping>:
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002470:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <__NVIC_GetPriorityGrouping+0x18>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	f003 0307 	and.w	r3, r3, #7
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_SetPriority>:
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	@ (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	@ (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	@ 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	@ 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f7ff ff8e 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff47 	bl	8002424 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff5c 	bl	800246c <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff8e 	bl	80024dc <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5d 	bl	8002488 <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ffb0 	bl	8002544 <SysTick_Config>
 80025e4:	4603      	mov	r3, r0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fe:	e148      	b.n	8002892 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 813a 	beq.w	800288c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d005      	beq.n	8002630 <HAL_GPIO_Init+0x40>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d130      	bne.n	8002692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002666:	2201      	movs	r2, #1
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0201 	and.w	r2, r3, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b03      	cmp	r3, #3
 800269c:	d017      	beq.n	80026ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d123      	bne.n	8002722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	6939      	ldr	r1, [r7, #16]
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8094 	beq.w	800288c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002764:	4b52      	ldr	r3, [pc, #328]	@ (80028b0 <HAL_GPIO_Init+0x2c0>)
 8002766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002768:	4a51      	ldr	r2, [pc, #324]	@ (80028b0 <HAL_GPIO_Init+0x2c0>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002770:	4b4f      	ldr	r3, [pc, #316]	@ (80028b0 <HAL_GPIO_Init+0x2c0>)
 8002772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800277c:	4a4d      	ldr	r2, [pc, #308]	@ (80028b4 <HAL_GPIO_Init+0x2c4>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027a6:	d00d      	beq.n	80027c4 <HAL_GPIO_Init+0x1d4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a43      	ldr	r2, [pc, #268]	@ (80028b8 <HAL_GPIO_Init+0x2c8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <HAL_GPIO_Init+0x1d0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a42      	ldr	r2, [pc, #264]	@ (80028bc <HAL_GPIO_Init+0x2cc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_GPIO_Init+0x1cc>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e004      	b.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027bc:	2307      	movs	r3, #7
 80027be:	e002      	b.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027c4:	2300      	movs	r3, #0
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	f002 0203 	and.w	r2, r2, #3
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	4093      	lsls	r3, r2
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027d6:	4937      	ldr	r1, [pc, #220]	@ (80028b4 <HAL_GPIO_Init+0x2c4>)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e4:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <HAL_GPIO_Init+0x2d0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002808:	4a2d      	ldr	r2, [pc, #180]	@ (80028c0 <HAL_GPIO_Init+0x2d0>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800280e:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002832:	4a23      	ldr	r2, [pc, #140]	@ (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002838:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <HAL_GPIO_Init+0x2d0>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800285c:	4a18      	ldr	r2, [pc, #96]	@ (80028c0 <HAL_GPIO_Init+0x2d0>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002886:	4a0e      	ldr	r2, [pc, #56]	@ (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	f47f aeaf 	bne.w	8002600 <HAL_GPIO_Init+0x10>
  }
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	48000400 	.word	0x48000400
 80028bc:	48000800 	.word	0x48000800
 80028c0:	40010400 	.word	0x40010400

080028c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e049      	b.n	800296a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fc64 	bl	80021b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4610      	mov	r0, r2
 8002904:	f000 fa7e 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e049      	b.n	8002a18 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fbed 	bl	8002178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2202      	movs	r2, #2
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f000 fa27 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x24>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e03c      	b.n	8002abe <HAL_TIM_PWM_Start+0x9e>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d109      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x3e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e02f      	b.n	8002abe <HAL_TIM_PWM_Start+0x9e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x58>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e022      	b.n	8002abe <HAL_TIM_PWM_Start+0x9e>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d109      	bne.n	8002a92 <HAL_TIM_PWM_Start+0x72>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	e015      	b.n	8002abe <HAL_TIM_PWM_Start+0x9e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d109      	bne.n	8002aac <HAL_TIM_PWM_Start+0x8c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e008      	b.n	8002abe <HAL_TIM_PWM_Start+0x9e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07e      	b.n	8002bc4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0xb6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ad4:	e023      	b.n	8002b1e <HAL_TIM_PWM_Start+0xfe>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0xc6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ae4:	e01b      	b.n	8002b1e <HAL_TIM_PWM_Start+0xfe>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0xd6>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002af4:	e013      	b.n	8002b1e <HAL_TIM_PWM_Start+0xfe>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d104      	bne.n	8002b06 <HAL_TIM_PWM_Start+0xe6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b04:	e00b      	b.n	8002b1e <HAL_TIM_PWM_Start+0xfe>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d104      	bne.n	8002b16 <HAL_TIM_PWM_Start+0xf6>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b14:	e003      	b.n	8002b1e <HAL_TIM_PWM_Start+0xfe>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	6839      	ldr	r1, [r7, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fc5a 	bl	80033e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a26      	ldr	r2, [pc, #152]	@ (8002bcc <HAL_TIM_PWM_Start+0x1ac>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x12a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a25      	ldr	r2, [pc, #148]	@ (8002bd0 <HAL_TIM_PWM_Start+0x1b0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x12a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a23      	ldr	r2, [pc, #140]	@ (8002bd4 <HAL_TIM_PWM_Start+0x1b4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_Start+0x12e>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_TIM_PWM_Start+0x130>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <HAL_TIM_PWM_Start+0x1ac>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x162>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b76:	d004      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x162>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a14      	ldr	r2, [pc, #80]	@ (8002bd0 <HAL_TIM_PWM_Start+0x1b0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d115      	bne.n	8002bae <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <HAL_TIM_PWM_Start+0x1b8>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b06      	cmp	r3, #6
 8002b92:	d015      	beq.n	8002bc0 <HAL_TIM_PWM_Start+0x1a0>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b9a:	d011      	beq.n	8002bc0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bac:	e008      	b.n	8002bc0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e000      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40014000 	.word	0x40014000
 8002bd4:	40014400 	.word	0x40014400
 8002bd8:	00010007 	.word	0x00010007

08002bdc <HAL_TIM_PWM_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]

 8002be8:	2300      	movs	r3, #0
 8002bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);

 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e0ff      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (Channel)
  {
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b14      	cmp	r3, #20
 8002c06:	f200 80f0 	bhi.w	8002dea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c10:	08002c65 	.word	0x08002c65
 8002c14:	08002deb 	.word	0x08002deb
 8002c18:	08002deb 	.word	0x08002deb
 8002c1c:	08002deb 	.word	0x08002deb
 8002c20:	08002ca5 	.word	0x08002ca5
 8002c24:	08002deb 	.word	0x08002deb
 8002c28:	08002deb 	.word	0x08002deb
 8002c2c:	08002deb 	.word	0x08002deb
 8002c30:	08002ce7 	.word	0x08002ce7
 8002c34:	08002deb 	.word	0x08002deb
 8002c38:	08002deb 	.word	0x08002deb
 8002c3c:	08002deb 	.word	0x08002deb
 8002c40:	08002d27 	.word	0x08002d27
 8002c44:	08002deb 	.word	0x08002deb
 8002c48:	08002deb 	.word	0x08002deb
 8002c4c:	08002deb 	.word	0x08002deb
 8002c50:	08002d69 	.word	0x08002d69
 8002c54:	08002deb 	.word	0x08002deb
 8002c58:	08002deb 	.word	0x08002deb
 8002c5c:	08002deb 	.word	0x08002deb
 8002c60:	08002da9 	.word	0x08002da9
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);

 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f93a 	bl	8002ee4 <TIM_OC1_SetConfig>
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;

 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0208 	orr.w	r2, r2, #8
 8002c7e:	619a      	str	r2, [r3, #24]
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0204 	bic.w	r2, r2, #4
 8002c8e:	619a      	str	r2, [r3, #24]
      break;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6999      	ldr	r1, [r3, #24]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	619a      	str	r2, [r3, #24]
    }
 8002ca2:	e0a5      	b.n	8002df0 <HAL_TIM_PWM_ConfigChannel+0x214>
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f996 	bl	8002fdc <TIM_OC2_SetConfig>
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;

 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cbe:	619a      	str	r2, [r3, #24]
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cce:	619a      	str	r2, [r3, #24]
      break;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6999      	ldr	r1, [r3, #24]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	021a      	lsls	r2, r3, #8
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	619a      	str	r2, [r3, #24]
    }
 8002ce4:	e084      	b.n	8002df0 <HAL_TIM_PWM_ConfigChannel+0x214>
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);

 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f9ef 	bl	80030d0 <TIM_OC3_SetConfig>
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;

 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0208 	orr.w	r2, r2, #8
 8002d00:	61da      	str	r2, [r3, #28]
      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69da      	ldr	r2, [r3, #28]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0204 	bic.w	r2, r2, #4
 8002d10:	61da      	str	r2, [r3, #28]
      break;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69d9      	ldr	r1, [r3, #28]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	61da      	str	r2, [r3, #28]
    }
 8002d24:	e064      	b.n	8002df0 <HAL_TIM_PWM_ConfigChannel+0x214>
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fa47 	bl	80031c0 <TIM_OC4_SetConfig>
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;

 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d40:	61da      	str	r2, [r3, #28]
      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d50:	61da      	str	r2, [r3, #28]
      break;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69d9      	ldr	r1, [r3, #28]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	021a      	lsls	r2, r3, #8
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	61da      	str	r2, [r3, #28]
    }
 8002d66:	e043      	b.n	8002df0 <HAL_TIM_PWM_ConfigChannel+0x214>
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);

 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fa84 	bl	800327c <TIM_OC5_SetConfig>
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;

 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0208 	orr.w	r2, r2, #8
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54
      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0204 	bic.w	r2, r2, #4
 8002d92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
 8002da6:	e023      	b.n	8002df0 <HAL_TIM_PWM_ConfigChannel+0x214>
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fabc 	bl	800332c <TIM_OC6_SetConfig>
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;

 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	021a      	lsls	r2, r3, #8
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
 8002de8:	e002      	b.n	8002df0 <HAL_TIM_PWM_ConfigChannel+0x214>

    default:
      status = HAL_ERROR;
      break;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
  }
 8002dee:	bf00      	nop

  __HAL_UNLOCK(htim);

 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  return status;
}
 8002df8:	7dfb      	ldrb	r3, [r7, #23]

 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop

08002e04 <TIM_Base_SetConfig>:
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  tmpcr1 = TIMx->CR1;

 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a30      	ldr	r2, [pc, #192]	@ (8002ed8 <TIM_Base_SetConfig+0xd4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_Base_SetConfig+0x20>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e22:	d108      	bne.n	8002e36 <TIM_Base_SetConfig+0x32>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2a:	60fb      	str	r3, [r7, #12]
  }
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a27      	ldr	r2, [pc, #156]	@ (8002ed8 <TIM_Base_SetConfig+0xd4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00b      	beq.n	8002e56 <TIM_Base_SetConfig+0x52>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e44:	d007      	beq.n	8002e56 <TIM_Base_SetConfig+0x52>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a24      	ldr	r2, [pc, #144]	@ (8002edc <TIM_Base_SetConfig+0xd8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <TIM_Base_SetConfig+0x52>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a23      	ldr	r2, [pc, #140]	@ (8002ee0 <TIM_Base_SetConfig+0xdc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d108      	bne.n	8002e68 <TIM_Base_SetConfig+0x64>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e5c:	60fb      	str	r3, [r7, #12]
  }
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  TIMx->CR1 = tmpcr1;

 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]
  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ed8 <TIM_Base_SetConfig+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d007      	beq.n	8002ea4 <TIM_Base_SetConfig+0xa0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a11      	ldr	r2, [pc, #68]	@ (8002edc <TIM_Base_SetConfig+0xd8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d003      	beq.n	8002ea4 <TIM_Base_SetConfig+0xa0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ee0 <TIM_Base_SetConfig+0xdc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d103      	bne.n	8002eac <TIM_Base_SetConfig+0xa8>
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
  }
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;

 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	615a      	str	r2, [r3, #20]
  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
  {
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <TIM_Base_SetConfig+0xc6>
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
  }
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f023 0201 	bic.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
}

 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400

08002ee4 <TIM_OC1_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
  uint32_t tmpccmrx;
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	617b      	str	r3, [r7, #20]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;

 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f023 0201 	bic.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	621a      	str	r2, [r3, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0303 	bic.w	r3, r3, #3
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= OC_Config->OCMode;

 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 0302 	bic.w	r3, r3, #2
 8002f30:	617b      	str	r3, [r7, #20]
  tmpccer |= OC_Config->OCPolarity;

 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
  {
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	@ (8002fd0 <TIM_OC1_SetConfig+0xec>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <TIM_OC1_SetConfig+0x70>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a23      	ldr	r2, [pc, #140]	@ (8002fd4 <TIM_OC1_SetConfig+0xf0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_OC1_SetConfig+0x70>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a22      	ldr	r2, [pc, #136]	@ (8002fd8 <TIM_OC1_SetConfig+0xf4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10c      	bne.n	8002f6e <TIM_OC1_SetConfig+0x8a>
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 0308 	bic.w	r3, r3, #8
 8002f5a:	617b      	str	r3, [r7, #20]
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
  }
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f023 0304 	bic.w	r3, r3, #4
 8002f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
  {
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <TIM_OC1_SetConfig+0xec>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_OC1_SetConfig+0xa2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a16      	ldr	r2, [pc, #88]	@ (8002fd4 <TIM_OC1_SetConfig+0xf0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_OC1_SetConfig+0xa2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a15      	ldr	r2, [pc, #84]	@ (8002fd8 <TIM_OC1_SetConfig+0xf4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d111      	bne.n	8002faa <TIM_OC1_SetConfig+0xc6>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f94:	613b      	str	r3, [r7, #16]
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 |= OC_Config->OCNIdleState;
  }
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	605a      	str	r2, [r3, #4]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	619a      	str	r2, [r3, #24]
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;

 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	621a      	str	r2, [r3, #32]

 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	40014400 	.word	0x40014400

08002fdc <TIM_OC2_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
  uint32_t tmpccmrx;
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	617b      	str	r3, [r7, #20]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;

 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f023 0210 	bic.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	621a      	str	r2, [r3, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800300a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800300e:	60fb      	str	r3, [r7, #12]

 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0320 	bic.w	r3, r3, #32
 800302a:	617b      	str	r3, [r7, #20]
  tmpccer |= (OC_Config->OCPolarity << 4U);

 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <TIM_OC2_SetConfig+0xe8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10d      	bne.n	800305c <TIM_OC2_SetConfig+0x80>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003046:	617b      	str	r3, [r7, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
    tmpccer &= ~TIM_CCER_CC2NE;
  }
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800305a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
  {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a19      	ldr	r2, [pc, #100]	@ (80030c4 <TIM_OC2_SetConfig+0xe8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_OC2_SetConfig+0x98>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a18      	ldr	r2, [pc, #96]	@ (80030c8 <TIM_OC2_SetConfig+0xec>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_OC2_SetConfig+0x98>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a17      	ldr	r2, [pc, #92]	@ (80030cc <TIM_OC2_SetConfig+0xf0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d113      	bne.n	800309c <TIM_OC2_SetConfig+0xc0>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800307a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003082:	613b      	str	r3, [r7, #16]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	619a      	str	r2, [r3, #24]
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;

 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	621a      	str	r2, [r3, #32]

 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40014000 	.word	0x40014000
 80030cc:	40014400 	.word	0x40014400

080030d0 <TIM_OC3_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
  uint32_t tmpccmrx;
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	617b      	str	r3, [r7, #20]
  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;

 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	621a      	str	r2, [r3, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= OC_Config->OCMode;

 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800311c:	617b      	str	r3, [r7, #20]
  tmpccer |= (OC_Config->OCPolarity << 8U);

 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a21      	ldr	r2, [pc, #132]	@ (80031b4 <TIM_OC3_SetConfig+0xe4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10d      	bne.n	800314e <TIM_OC3_SetConfig+0x7e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003138:	617b      	str	r3, [r7, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
    tmpccer &= ~TIM_CCER_CC3NE;
  }
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800314c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
  {
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a18      	ldr	r2, [pc, #96]	@ (80031b4 <TIM_OC3_SetConfig+0xe4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <TIM_OC3_SetConfig+0x96>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <TIM_OC3_SetConfig+0xe8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_OC3_SetConfig+0x96>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a16      	ldr	r2, [pc, #88]	@ (80031bc <TIM_OC3_SetConfig+0xec>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d113      	bne.n	800318e <TIM_OC3_SetConfig+0xbe>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800316c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003174:	613b      	str	r3, [r7, #16]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	605a      	str	r2, [r3, #4]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	61da      	str	r2, [r3, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;

 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	621a      	str	r2, [r3, #32]

 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40014400 	.word	0x40014400

080031c0 <TIM_OC4_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
  uint32_t tmpccmrx;
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	613b      	str	r3, [r7, #16]
  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;

 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	621a      	str	r2, [r3, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031f2:	60fb      	str	r3, [r7, #12]

 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800320e:	613b      	str	r3, [r7, #16]
  tmpccer |= (OC_Config->OCPolarity << 12U);

 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
  {
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a14      	ldr	r2, [pc, #80]	@ (8003270 <TIM_OC4_SetConfig+0xb0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_OC4_SetConfig+0x74>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a13      	ldr	r2, [pc, #76]	@ (8003274 <TIM_OC4_SetConfig+0xb4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_OC4_SetConfig+0x74>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a12      	ldr	r2, [pc, #72]	@ (8003278 <TIM_OC4_SetConfig+0xb8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d109      	bne.n	8003248 <TIM_OC4_SetConfig+0x88>
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	605a      	str	r2, [r3, #4]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	61da      	str	r2, [r3, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;

 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	621a      	str	r2, [r3, #32]

 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400

0800327c <TIM_OC5_SetConfig>:
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
  uint32_t tmpccmrx;
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	613b      	str	r3, [r7, #16]
  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;

 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	621a      	str	r2, [r3, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	617b      	str	r3, [r7, #20]
  tmpccmrx = TIMx->CCMR3;

 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= OC_Config->OCMode;

 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80032c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (OC_Config->OCPolarity << 16U);

 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
  {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a13      	ldr	r2, [pc, #76]	@ (8003320 <TIM_OC5_SetConfig+0xa4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_OC5_SetConfig+0x6a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a12      	ldr	r2, [pc, #72]	@ (8003324 <TIM_OC5_SetConfig+0xa8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_OC5_SetConfig+0x6a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a11      	ldr	r2, [pc, #68]	@ (8003328 <TIM_OC5_SetConfig+0xac>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d109      	bne.n	80032fa <TIM_OC5_SetConfig+0x7e>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ec:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
  }
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	605a      	str	r2, [r3, #4]
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;

 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	621a      	str	r2, [r3, #32]

 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400

0800332c <TIM_OC6_SetConfig>:
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
  uint32_t tmpccmrx;
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	613b      	str	r3, [r7, #16]
  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;

 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	621a      	str	r2, [r3, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	617b      	str	r3, [r7, #20]
  tmpccmrx = TIMx->CCMR3;

 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003352:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800335e:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= (OC_Config->OCMode << 8U);

 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003372:	613b      	str	r3, [r7, #16]
  tmpccer |= (OC_Config->OCPolarity << 20U);

 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	051b      	lsls	r3, r3, #20
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
  {
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a14      	ldr	r2, [pc, #80]	@ (80033d4 <TIM_OC6_SetConfig+0xa8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_OC6_SetConfig+0x6c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a13      	ldr	r2, [pc, #76]	@ (80033d8 <TIM_OC6_SetConfig+0xac>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_OC6_SetConfig+0x6c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a12      	ldr	r2, [pc, #72]	@ (80033dc <TIM_OC6_SetConfig+0xb0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d109      	bne.n	80033ac <TIM_OC6_SetConfig+0x80>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800339e:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
  }
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	029b      	lsls	r3, r3, #10
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	605a      	str	r2, [r3, #4]
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;

 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	621a      	str	r2, [r3, #32]

 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40014000 	.word	0x40014000
 80033dc:	40014400 	.word	0x40014400

080033e0 <TIM_CCxChannelCmd>:
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2201      	movs	r2, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	621a      	str	r2, [r3, #32]
  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
}
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	431a      	orrs	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	621a      	str	r2, [r3, #32]

 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003440:	2302      	movs	r3, #2
 8003442:	e04f      	b.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a21      	ldr	r2, [pc, #132]	@ (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d108      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003474:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a14      	ldr	r2, [pc, #80]	@ (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d009      	beq.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ac:	d004      	beq.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d10c      	bne.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40014000 	.word	0x40014000

080034f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003510:	2302      	movs	r3, #2
 8003512:	e060      	b.n	80035d6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a14      	ldr	r2, [pc, #80]	@ (80035e4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d115      	bne.n	80035c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	051b      	lsls	r3, r3, #20
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00

080035e8 <LL_GPIO_SetPinMode>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b08b      	sub	sp, #44	@ 0x2c
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e003      	b.n	800361a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2103      	movs	r1, #3
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	401a      	ands	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	61fb      	str	r3, [r7, #28]
  return result;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800363c:	2320      	movs	r3, #32
 800363e:	e003      	b.n	8003648 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]
}
 8003656:	bf00      	nop
 8003658:	372c      	adds	r7, #44	@ 0x2c
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_GPIO_SetPinOutputType>:
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	43db      	mvns	r3, r3
 8003676:	401a      	ands	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <LL_GPIO_SetPinSpeed>:
{
 8003692:	b480      	push	{r7}
 8003694:	b08b      	sub	sp, #44	@ 0x2c
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	613b      	str	r3, [r7, #16]
  return result;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2103      	movs	r1, #3
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	61fb      	str	r3, [r7, #28]
  return result;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80036e6:	2320      	movs	r3, #32
 80036e8:	e003      	b.n	80036f2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	431a      	orrs	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	609a      	str	r2, [r3, #8]
}
 8003700:	bf00      	nop
 8003702:	372c      	adds	r7, #44	@ 0x2c
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_GPIO_SetPinPull>:
{
 800370c:	b480      	push	{r7}
 800370e:	b08b      	sub	sp, #44	@ 0x2c
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	613b      	str	r3, [r7, #16]
  return result;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003732:	2320      	movs	r3, #32
 8003734:	e003      	b.n	800373e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2103      	movs	r1, #3
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	401a      	ands	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	61fb      	str	r3, [r7, #28]
  return result;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e003      	b.n	800376c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	60da      	str	r2, [r3, #12]
}
 800377a:	bf00      	nop
 800377c:	372c      	adds	r7, #44	@ 0x2c
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_GPIO_SetAFPin_0_7>:
{
 8003786:	b480      	push	{r7}
 8003788:	b08b      	sub	sp, #44	@ 0x2c
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1a      	ldr	r2, [r3, #32]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	613b      	str	r3, [r7, #16]
  return result;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	e003      	b.n	80037b8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	210f      	movs	r1, #15
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	401a      	ands	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	61fb      	str	r3, [r7, #28]
  return result;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80037da:	2320      	movs	r3, #32
 80037dc:	e003      	b.n	80037e6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	431a      	orrs	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	372c      	adds	r7, #44	@ 0x2c
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_GPIO_SetAFPin_8_15>:
{
 8003800:	b480      	push	{r7}
 8003802:	b08b      	sub	sp, #44	@ 0x2c
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	613b      	str	r3, [r7, #16]
  return result;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e003      	b.n	8003834 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	210f      	movs	r1, #15
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	401a      	ands	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	61fb      	str	r3, [r7, #28]
  return result;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003858:	2320      	movs	r3, #32
 800385a:	e003      	b.n	8003864 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	431a      	orrs	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003872:	bf00      	nop
 8003874:	372c      	adds	r7, #44	@ 0x2c
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b088      	sub	sp, #32
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	60fb      	str	r3, [r7, #12]
  return result;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <LL_GPIO_Init+0x26>
    return 32U;
 80038a0:	2320      	movs	r3, #32
 80038a2:	e003      	b.n	80038ac <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80038ae:	e048      	b.n	8003942 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	2101      	movs	r1, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03a      	beq.n	800393c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d003      	beq.n	80038d6 <LL_GPIO_Init+0x58>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d10e      	bne.n	80038f4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	461a      	mov	r2, r3
 80038dc:	69b9      	ldr	r1, [r7, #24]
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff fed7 	bl	8003692 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	461a      	mov	r2, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff feb7 	bl	8003662 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	461a      	mov	r2, r3
 80038fa:	69b9      	ldr	r1, [r7, #24]
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff05 	bl	800370c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d111      	bne.n	800392e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2bff      	cmp	r3, #255	@ 0xff
 800390e:	d807      	bhi.n	8003920 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	461a      	mov	r2, r3
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff34 	bl	8003786 <LL_GPIO_SetAFPin_0_7>
 800391e:	e006      	b.n	800392e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	461a      	mov	r2, r3
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff69 	bl	8003800 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	461a      	mov	r2, r3
 8003934:	69b9      	ldr	r1, [r7, #24]
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fe56 	bl	80035e8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	3301      	adds	r3, #1
 8003940:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1af      	bne.n	80038b0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <LL_TIM_SetPrescaler>:
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_TIM_SetAutoReload>:
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LL_TIM_SetRepetitionCounter>:
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	615a      	str	r2, [r3, #20]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a27      	ldr	r2, [pc, #156]	@ (8003a80 <LL_TIM_Init+0xb0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <LL_TIM_Init+0x20>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ee:	d106      	bne.n	80039fe <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1f      	ldr	r2, [pc, #124]	@ (8003a80 <LL_TIM_Init+0xb0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00b      	beq.n	8003a1e <LL_TIM_Init+0x4e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0c:	d007      	beq.n	8003a1e <LL_TIM_Init+0x4e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a1c      	ldr	r2, [pc, #112]	@ (8003a84 <LL_TIM_Init+0xb4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <LL_TIM_Init+0x4e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	@ (8003a88 <LL_TIM_Init+0xb8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d106      	bne.n	8003a2c <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff9c 	bl	8003976 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff88 	bl	800395a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a80 <LL_TIM_Init+0xb0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <LL_TIM_Init+0x92>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a0b      	ldr	r2, [pc, #44]	@ (8003a84 <LL_TIM_Init+0xb4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <LL_TIM_Init+0x92>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a88 <LL_TIM_Init+0xb8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d105      	bne.n	8003a6e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff92 	bl	8003992 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff9d 	bl	80039ae <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40014400 	.word	0x40014400

08003a8c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003a94:	4a04      	ldr	r2, [pc, #16]	@ (8003aa8 <LL_SetSystemCoreClock+0x1c>)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6013      	str	r3, [r2, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000010 	.word	0x20000010

08003aac <memset>:
 8003aac:	4402      	add	r2, r0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <__libc_init_array>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	4d0d      	ldr	r5, [pc, #52]	@ (8003af4 <__libc_init_array+0x38>)
 8003ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8003af8 <__libc_init_array+0x3c>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	42a6      	cmp	r6, r4
 8003aca:	d109      	bne.n	8003ae0 <__libc_init_array+0x24>
 8003acc:	4d0b      	ldr	r5, [pc, #44]	@ (8003afc <__libc_init_array+0x40>)
 8003ace:	4c0c      	ldr	r4, [pc, #48]	@ (8003b00 <__libc_init_array+0x44>)
 8003ad0:	f001 f89e 	bl	8004c10 <_init>
 8003ad4:	1b64      	subs	r4, r4, r5
 8003ad6:	10a4      	asrs	r4, r4, #2
 8003ad8:	2600      	movs	r6, #0
 8003ada:	42a6      	cmp	r6, r4
 8003adc:	d105      	bne.n	8003aea <__libc_init_array+0x2e>
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae4:	4798      	blx	r3
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	e7ee      	b.n	8003ac8 <__libc_init_array+0xc>
 8003aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aee:	4798      	blx	r3
 8003af0:	3601      	adds	r6, #1
 8003af2:	e7f2      	b.n	8003ada <__libc_init_array+0x1e>
 8003af4:	08004e28 	.word	0x08004e28
 8003af8:	08004e28 	.word	0x08004e28
 8003afc:	08004e28 	.word	0x08004e28
 8003b00:	08004e2c 	.word	0x08004e2c
 8003b04:	00000000 	.word	0x00000000

08003b08 <cos>:
 8003b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b0a:	ec53 2b10 	vmov	r2, r3, d0
 8003b0e:	4826      	ldr	r0, [pc, #152]	@ (8003ba8 <cos+0xa0>)
 8003b10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b14:	4281      	cmp	r1, r0
 8003b16:	d806      	bhi.n	8003b26 <cos+0x1e>
 8003b18:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003ba0 <cos+0x98>
 8003b1c:	b005      	add	sp, #20
 8003b1e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b22:	f000 b899 	b.w	8003c58 <__kernel_cos>
 8003b26:	4821      	ldr	r0, [pc, #132]	@ (8003bac <cos+0xa4>)
 8003b28:	4281      	cmp	r1, r0
 8003b2a:	d908      	bls.n	8003b3e <cos+0x36>
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f7fc fb52 	bl	80001d8 <__aeabi_dsub>
 8003b34:	ec41 0b10 	vmov	d0, r0, r1
 8003b38:	b005      	add	sp, #20
 8003b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b3e:	4668      	mov	r0, sp
 8003b40:	f000 fa0e 	bl	8003f60 <__ieee754_rem_pio2>
 8003b44:	f000 0003 	and.w	r0, r0, #3
 8003b48:	2801      	cmp	r0, #1
 8003b4a:	d00b      	beq.n	8003b64 <cos+0x5c>
 8003b4c:	2802      	cmp	r0, #2
 8003b4e:	d015      	beq.n	8003b7c <cos+0x74>
 8003b50:	b9d8      	cbnz	r0, 8003b8a <cos+0x82>
 8003b52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b56:	ed9d 0b00 	vldr	d0, [sp]
 8003b5a:	f000 f87d 	bl	8003c58 <__kernel_cos>
 8003b5e:	ec51 0b10 	vmov	r0, r1, d0
 8003b62:	e7e7      	b.n	8003b34 <cos+0x2c>
 8003b64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b68:	ed9d 0b00 	vldr	d0, [sp]
 8003b6c:	f000 f93c 	bl	8003de8 <__kernel_sin>
 8003b70:	ec53 2b10 	vmov	r2, r3, d0
 8003b74:	4610      	mov	r0, r2
 8003b76:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003b7a:	e7db      	b.n	8003b34 <cos+0x2c>
 8003b7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b80:	ed9d 0b00 	vldr	d0, [sp]
 8003b84:	f000 f868 	bl	8003c58 <__kernel_cos>
 8003b88:	e7f2      	b.n	8003b70 <cos+0x68>
 8003b8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b8e:	ed9d 0b00 	vldr	d0, [sp]
 8003b92:	2001      	movs	r0, #1
 8003b94:	f000 f928 	bl	8003de8 <__kernel_sin>
 8003b98:	e7e1      	b.n	8003b5e <cos+0x56>
 8003b9a:	bf00      	nop
 8003b9c:	f3af 8000 	nop.w
	...
 8003ba8:	3fe921fb 	.word	0x3fe921fb
 8003bac:	7fefffff 	.word	0x7fefffff

08003bb0 <sin>:
 8003bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bb2:	ec53 2b10 	vmov	r2, r3, d0
 8003bb6:	4826      	ldr	r0, [pc, #152]	@ (8003c50 <sin+0xa0>)
 8003bb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003bbc:	4281      	cmp	r1, r0
 8003bbe:	d807      	bhi.n	8003bd0 <sin+0x20>
 8003bc0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003c48 <sin+0x98>
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	b005      	add	sp, #20
 8003bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bcc:	f000 b90c 	b.w	8003de8 <__kernel_sin>
 8003bd0:	4820      	ldr	r0, [pc, #128]	@ (8003c54 <sin+0xa4>)
 8003bd2:	4281      	cmp	r1, r0
 8003bd4:	d908      	bls.n	8003be8 <sin+0x38>
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f7fc fafd 	bl	80001d8 <__aeabi_dsub>
 8003bde:	ec41 0b10 	vmov	d0, r0, r1
 8003be2:	b005      	add	sp, #20
 8003be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003be8:	4668      	mov	r0, sp
 8003bea:	f000 f9b9 	bl	8003f60 <__ieee754_rem_pio2>
 8003bee:	f000 0003 	and.w	r0, r0, #3
 8003bf2:	2801      	cmp	r0, #1
 8003bf4:	d00c      	beq.n	8003c10 <sin+0x60>
 8003bf6:	2802      	cmp	r0, #2
 8003bf8:	d011      	beq.n	8003c1e <sin+0x6e>
 8003bfa:	b9e8      	cbnz	r0, 8003c38 <sin+0x88>
 8003bfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c00:	ed9d 0b00 	vldr	d0, [sp]
 8003c04:	2001      	movs	r0, #1
 8003c06:	f000 f8ef 	bl	8003de8 <__kernel_sin>
 8003c0a:	ec51 0b10 	vmov	r0, r1, d0
 8003c0e:	e7e6      	b.n	8003bde <sin+0x2e>
 8003c10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c14:	ed9d 0b00 	vldr	d0, [sp]
 8003c18:	f000 f81e 	bl	8003c58 <__kernel_cos>
 8003c1c:	e7f5      	b.n	8003c0a <sin+0x5a>
 8003c1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c22:	ed9d 0b00 	vldr	d0, [sp]
 8003c26:	2001      	movs	r0, #1
 8003c28:	f000 f8de 	bl	8003de8 <__kernel_sin>
 8003c2c:	ec53 2b10 	vmov	r2, r3, d0
 8003c30:	4610      	mov	r0, r2
 8003c32:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003c36:	e7d2      	b.n	8003bde <sin+0x2e>
 8003c38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c3c:	ed9d 0b00 	vldr	d0, [sp]
 8003c40:	f000 f80a 	bl	8003c58 <__kernel_cos>
 8003c44:	e7f2      	b.n	8003c2c <sin+0x7c>
 8003c46:	bf00      	nop
	...
 8003c50:	3fe921fb 	.word	0x3fe921fb
 8003c54:	7fefffff 	.word	0x7fefffff

08003c58 <__kernel_cos>:
 8003c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5c:	ec57 6b10 	vmov	r6, r7, d0
 8003c60:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003c64:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003c68:	ed8d 1b00 	vstr	d1, [sp]
 8003c6c:	d206      	bcs.n	8003c7c <__kernel_cos+0x24>
 8003c6e:	4630      	mov	r0, r6
 8003c70:	4639      	mov	r1, r7
 8003c72:	f7fc ff03 	bl	8000a7c <__aeabi_d2iz>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	f000 8088 	beq.w	8003d8c <__kernel_cos+0x134>
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	463b      	mov	r3, r7
 8003c80:	4630      	mov	r0, r6
 8003c82:	4639      	mov	r1, r7
 8003c84:	f7fc fc60 	bl	8000548 <__aeabi_dmul>
 8003c88:	4b51      	ldr	r3, [pc, #324]	@ (8003dd0 <__kernel_cos+0x178>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	460d      	mov	r5, r1
 8003c90:	f7fc fc5a 	bl	8000548 <__aeabi_dmul>
 8003c94:	a340      	add	r3, pc, #256	@ (adr r3, 8003d98 <__kernel_cos+0x140>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	4682      	mov	sl, r0
 8003c9c:	468b      	mov	fp, r1
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	f7fc fc51 	bl	8000548 <__aeabi_dmul>
 8003ca6:	a33e      	add	r3, pc, #248	@ (adr r3, 8003da0 <__kernel_cos+0x148>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc fa96 	bl	80001dc <__adddf3>
 8003cb0:	4622      	mov	r2, r4
 8003cb2:	462b      	mov	r3, r5
 8003cb4:	f7fc fc48 	bl	8000548 <__aeabi_dmul>
 8003cb8:	a33b      	add	r3, pc, #236	@ (adr r3, 8003da8 <__kernel_cos+0x150>)
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f7fc fa8b 	bl	80001d8 <__aeabi_dsub>
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	462b      	mov	r3, r5
 8003cc6:	f7fc fc3f 	bl	8000548 <__aeabi_dmul>
 8003cca:	a339      	add	r3, pc, #228	@ (adr r3, 8003db0 <__kernel_cos+0x158>)
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f7fc fa84 	bl	80001dc <__adddf3>
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	f7fc fc36 	bl	8000548 <__aeabi_dmul>
 8003cdc:	a336      	add	r3, pc, #216	@ (adr r3, 8003db8 <__kernel_cos+0x160>)
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f7fc fa79 	bl	80001d8 <__aeabi_dsub>
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	f7fc fc2d 	bl	8000548 <__aeabi_dmul>
 8003cee:	a334      	add	r3, pc, #208	@ (adr r3, 8003dc0 <__kernel_cos+0x168>)
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f7fc fa72 	bl	80001dc <__adddf3>
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	462b      	mov	r3, r5
 8003cfc:	f7fc fc24 	bl	8000548 <__aeabi_dmul>
 8003d00:	4622      	mov	r2, r4
 8003d02:	462b      	mov	r3, r5
 8003d04:	f7fc fc20 	bl	8000548 <__aeabi_dmul>
 8003d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	460d      	mov	r5, r1
 8003d10:	4630      	mov	r0, r6
 8003d12:	4639      	mov	r1, r7
 8003d14:	f7fc fc18 	bl	8000548 <__aeabi_dmul>
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f7fc fa5a 	bl	80001d8 <__aeabi_dsub>
 8003d24:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd4 <__kernel_cos+0x17c>)
 8003d26:	4598      	cmp	r8, r3
 8003d28:	4606      	mov	r6, r0
 8003d2a:	460f      	mov	r7, r1
 8003d2c:	d810      	bhi.n	8003d50 <__kernel_cos+0xf8>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4650      	mov	r0, sl
 8003d34:	4659      	mov	r1, fp
 8003d36:	f7fc fa4f 	bl	80001d8 <__aeabi_dsub>
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4926      	ldr	r1, [pc, #152]	@ (8003dd8 <__kernel_cos+0x180>)
 8003d3e:	4602      	mov	r2, r0
 8003d40:	2000      	movs	r0, #0
 8003d42:	f7fc fa49 	bl	80001d8 <__aeabi_dsub>
 8003d46:	ec41 0b10 	vmov	d0, r0, r1
 8003d4a:	b003      	add	sp, #12
 8003d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d50:	4b22      	ldr	r3, [pc, #136]	@ (8003ddc <__kernel_cos+0x184>)
 8003d52:	4921      	ldr	r1, [pc, #132]	@ (8003dd8 <__kernel_cos+0x180>)
 8003d54:	4598      	cmp	r8, r3
 8003d56:	bf8c      	ite	hi
 8003d58:	4d21      	ldrhi	r5, [pc, #132]	@ (8003de0 <__kernel_cos+0x188>)
 8003d5a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003d5e:	2400      	movs	r4, #0
 8003d60:	4622      	mov	r2, r4
 8003d62:	462b      	mov	r3, r5
 8003d64:	2000      	movs	r0, #0
 8003d66:	f7fc fa37 	bl	80001d8 <__aeabi_dsub>
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	4680      	mov	r8, r0
 8003d6e:	4689      	mov	r9, r1
 8003d70:	462b      	mov	r3, r5
 8003d72:	4650      	mov	r0, sl
 8003d74:	4659      	mov	r1, fp
 8003d76:	f7fc fa2f 	bl	80001d8 <__aeabi_dsub>
 8003d7a:	4632      	mov	r2, r6
 8003d7c:	463b      	mov	r3, r7
 8003d7e:	f7fc fa2b 	bl	80001d8 <__aeabi_dsub>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4640      	mov	r0, r8
 8003d88:	4649      	mov	r1, r9
 8003d8a:	e7da      	b.n	8003d42 <__kernel_cos+0xea>
 8003d8c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003dc8 <__kernel_cos+0x170>
 8003d90:	e7db      	b.n	8003d4a <__kernel_cos+0xf2>
 8003d92:	bf00      	nop
 8003d94:	f3af 8000 	nop.w
 8003d98:	be8838d4 	.word	0xbe8838d4
 8003d9c:	bda8fae9 	.word	0xbda8fae9
 8003da0:	bdb4b1c4 	.word	0xbdb4b1c4
 8003da4:	3e21ee9e 	.word	0x3e21ee9e
 8003da8:	809c52ad 	.word	0x809c52ad
 8003dac:	3e927e4f 	.word	0x3e927e4f
 8003db0:	19cb1590 	.word	0x19cb1590
 8003db4:	3efa01a0 	.word	0x3efa01a0
 8003db8:	16c15177 	.word	0x16c15177
 8003dbc:	3f56c16c 	.word	0x3f56c16c
 8003dc0:	5555554c 	.word	0x5555554c
 8003dc4:	3fa55555 	.word	0x3fa55555
 8003dc8:	00000000 	.word	0x00000000
 8003dcc:	3ff00000 	.word	0x3ff00000
 8003dd0:	3fe00000 	.word	0x3fe00000
 8003dd4:	3fd33332 	.word	0x3fd33332
 8003dd8:	3ff00000 	.word	0x3ff00000
 8003ddc:	3fe90000 	.word	0x3fe90000
 8003de0:	3fd20000 	.word	0x3fd20000
 8003de4:	00000000 	.word	0x00000000

08003de8 <__kernel_sin>:
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	ec55 4b10 	vmov	r4, r5, d0
 8003df0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003df4:	b085      	sub	sp, #20
 8003df6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003dfa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003dfe:	4680      	mov	r8, r0
 8003e00:	d205      	bcs.n	8003e0e <__kernel_sin+0x26>
 8003e02:	4620      	mov	r0, r4
 8003e04:	4629      	mov	r1, r5
 8003e06:	f7fc fe39 	bl	8000a7c <__aeabi_d2iz>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d052      	beq.n	8003eb4 <__kernel_sin+0xcc>
 8003e0e:	4622      	mov	r2, r4
 8003e10:	462b      	mov	r3, r5
 8003e12:	4620      	mov	r0, r4
 8003e14:	4629      	mov	r1, r5
 8003e16:	f7fc fb97 	bl	8000548 <__aeabi_dmul>
 8003e1a:	4682      	mov	sl, r0
 8003e1c:	468b      	mov	fp, r1
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4620      	mov	r0, r4
 8003e24:	4629      	mov	r1, r5
 8003e26:	f7fc fb8f 	bl	8000548 <__aeabi_dmul>
 8003e2a:	a342      	add	r3, pc, #264	@ (adr r3, 8003f34 <__kernel_sin+0x14c>)
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	e9cd 0100 	strd	r0, r1, [sp]
 8003e34:	4650      	mov	r0, sl
 8003e36:	4659      	mov	r1, fp
 8003e38:	f7fc fb86 	bl	8000548 <__aeabi_dmul>
 8003e3c:	a33f      	add	r3, pc, #252	@ (adr r3, 8003f3c <__kernel_sin+0x154>)
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f7fc f9c9 	bl	80001d8 <__aeabi_dsub>
 8003e46:	4652      	mov	r2, sl
 8003e48:	465b      	mov	r3, fp
 8003e4a:	f7fc fb7d 	bl	8000548 <__aeabi_dmul>
 8003e4e:	a33d      	add	r3, pc, #244	@ (adr r3, 8003f44 <__kernel_sin+0x15c>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f7fc f9c2 	bl	80001dc <__adddf3>
 8003e58:	4652      	mov	r2, sl
 8003e5a:	465b      	mov	r3, fp
 8003e5c:	f7fc fb74 	bl	8000548 <__aeabi_dmul>
 8003e60:	a33a      	add	r3, pc, #232	@ (adr r3, 8003f4c <__kernel_sin+0x164>)
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f7fc f9b7 	bl	80001d8 <__aeabi_dsub>
 8003e6a:	4652      	mov	r2, sl
 8003e6c:	465b      	mov	r3, fp
 8003e6e:	f7fc fb6b 	bl	8000548 <__aeabi_dmul>
 8003e72:	a338      	add	r3, pc, #224	@ (adr r3, 8003f54 <__kernel_sin+0x16c>)
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f7fc f9b0 	bl	80001dc <__adddf3>
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	460f      	mov	r7, r1
 8003e80:	f1b8 0f00 	cmp.w	r8, #0
 8003e84:	d11b      	bne.n	8003ebe <__kernel_sin+0xd6>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4650      	mov	r0, sl
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	f7fc fb5b 	bl	8000548 <__aeabi_dmul>
 8003e92:	a325      	add	r3, pc, #148	@ (adr r3, 8003f28 <__kernel_sin+0x140>)
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f7fc f99e 	bl	80001d8 <__aeabi_dsub>
 8003e9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ea0:	f7fc fb52 	bl	8000548 <__aeabi_dmul>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	4629      	mov	r1, r5
 8003eac:	f7fc f996 	bl	80001dc <__adddf3>
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	460d      	mov	r5, r1
 8003eb4:	ec45 4b10 	vmov	d0, r4, r5
 8003eb8:	b005      	add	sp, #20
 8003eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <__kernel_sin+0x148>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f7fc fb3f 	bl	8000548 <__aeabi_dmul>
 8003eca:	4632      	mov	r2, r6
 8003ecc:	4680      	mov	r8, r0
 8003ece:	4689      	mov	r9, r1
 8003ed0:	463b      	mov	r3, r7
 8003ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ed6:	f7fc fb37 	bl	8000548 <__aeabi_dmul>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4640      	mov	r0, r8
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	f7fc f979 	bl	80001d8 <__aeabi_dsub>
 8003ee6:	4652      	mov	r2, sl
 8003ee8:	465b      	mov	r3, fp
 8003eea:	f7fc fb2d 	bl	8000548 <__aeabi_dmul>
 8003eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ef2:	f7fc f971 	bl	80001d8 <__aeabi_dsub>
 8003ef6:	a30c      	add	r3, pc, #48	@ (adr r3, 8003f28 <__kernel_sin+0x140>)
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	4606      	mov	r6, r0
 8003efe:	460f      	mov	r7, r1
 8003f00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f04:	f7fc fb20 	bl	8000548 <__aeabi_dmul>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	4639      	mov	r1, r7
 8003f10:	f7fc f964 	bl	80001dc <__adddf3>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4620      	mov	r0, r4
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	f7fc f95c 	bl	80001d8 <__aeabi_dsub>
 8003f20:	e7c6      	b.n	8003eb0 <__kernel_sin+0xc8>
 8003f22:	bf00      	nop
 8003f24:	f3af 8000 	nop.w
 8003f28:	55555549 	.word	0x55555549
 8003f2c:	3fc55555 	.word	0x3fc55555
 8003f30:	3fe00000 	.word	0x3fe00000
 8003f34:	5acfd57c 	.word	0x5acfd57c
 8003f38:	3de5d93a 	.word	0x3de5d93a
 8003f3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003f40:	3e5ae5e6 	.word	0x3e5ae5e6
 8003f44:	57b1fe7d 	.word	0x57b1fe7d
 8003f48:	3ec71de3 	.word	0x3ec71de3
 8003f4c:	19c161d5 	.word	0x19c161d5
 8003f50:	3f2a01a0 	.word	0x3f2a01a0
 8003f54:	1110f8a6 	.word	0x1110f8a6
 8003f58:	3f811111 	.word	0x3f811111
 8003f5c:	00000000 	.word	0x00000000

08003f60 <__ieee754_rem_pio2>:
 8003f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f64:	ec57 6b10 	vmov	r6, r7, d0
 8003f68:	4bc5      	ldr	r3, [pc, #788]	@ (8004280 <__ieee754_rem_pio2+0x320>)
 8003f6a:	b08d      	sub	sp, #52	@ 0x34
 8003f6c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003f70:	4598      	cmp	r8, r3
 8003f72:	4604      	mov	r4, r0
 8003f74:	9704      	str	r7, [sp, #16]
 8003f76:	d807      	bhi.n	8003f88 <__ieee754_rem_pio2+0x28>
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	ed80 0b00 	vstr	d0, [r0]
 8003f80:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003f84:	2500      	movs	r5, #0
 8003f86:	e028      	b.n	8003fda <__ieee754_rem_pio2+0x7a>
 8003f88:	4bbe      	ldr	r3, [pc, #760]	@ (8004284 <__ieee754_rem_pio2+0x324>)
 8003f8a:	4598      	cmp	r8, r3
 8003f8c:	d878      	bhi.n	8004080 <__ieee754_rem_pio2+0x120>
 8003f8e:	9b04      	ldr	r3, [sp, #16]
 8003f90:	4dbd      	ldr	r5, [pc, #756]	@ (8004288 <__ieee754_rem_pio2+0x328>)
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	4630      	mov	r0, r6
 8003f96:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004248 <__ieee754_rem_pio2+0x2e8>)
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	dd38      	ble.n	8004012 <__ieee754_rem_pio2+0xb2>
 8003fa0:	f7fc f91a 	bl	80001d8 <__aeabi_dsub>
 8003fa4:	45a8      	cmp	r8, r5
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	460f      	mov	r7, r1
 8003faa:	d01a      	beq.n	8003fe2 <__ieee754_rem_pio2+0x82>
 8003fac:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004250 <__ieee754_rem_pio2+0x2f0>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f7fc f911 	bl	80001d8 <__aeabi_dsub>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4680      	mov	r8, r0
 8003fbc:	4689      	mov	r9, r1
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	f7fc f909 	bl	80001d8 <__aeabi_dsub>
 8003fc6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004250 <__ieee754_rem_pio2+0x2f0>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc f904 	bl	80001d8 <__aeabi_dsub>
 8003fd0:	e9c4 8900 	strd	r8, r9, [r4]
 8003fd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003fd8:	2501      	movs	r5, #1
 8003fda:	4628      	mov	r0, r5
 8003fdc:	b00d      	add	sp, #52	@ 0x34
 8003fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe2:	a39d      	add	r3, pc, #628	@ (adr r3, 8004258 <__ieee754_rem_pio2+0x2f8>)
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f7fc f8f6 	bl	80001d8 <__aeabi_dsub>
 8003fec:	a39c      	add	r3, pc, #624	@ (adr r3, 8004260 <__ieee754_rem_pio2+0x300>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	460f      	mov	r7, r1
 8003ff6:	f7fc f8ef 	bl	80001d8 <__aeabi_dsub>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4680      	mov	r8, r0
 8004000:	4689      	mov	r9, r1
 8004002:	4630      	mov	r0, r6
 8004004:	4639      	mov	r1, r7
 8004006:	f7fc f8e7 	bl	80001d8 <__aeabi_dsub>
 800400a:	a395      	add	r3, pc, #596	@ (adr r3, 8004260 <__ieee754_rem_pio2+0x300>)
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	e7dc      	b.n	8003fcc <__ieee754_rem_pio2+0x6c>
 8004012:	f7fc f8e3 	bl	80001dc <__adddf3>
 8004016:	45a8      	cmp	r8, r5
 8004018:	4606      	mov	r6, r0
 800401a:	460f      	mov	r7, r1
 800401c:	d018      	beq.n	8004050 <__ieee754_rem_pio2+0xf0>
 800401e:	a38c      	add	r3, pc, #560	@ (adr r3, 8004250 <__ieee754_rem_pio2+0x2f0>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f7fc f8da 	bl	80001dc <__adddf3>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4680      	mov	r8, r0
 800402e:	4689      	mov	r9, r1
 8004030:	4630      	mov	r0, r6
 8004032:	4639      	mov	r1, r7
 8004034:	f7fc f8d0 	bl	80001d8 <__aeabi_dsub>
 8004038:	a385      	add	r3, pc, #532	@ (adr r3, 8004250 <__ieee754_rem_pio2+0x2f0>)
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	f7fc f8cd 	bl	80001dc <__adddf3>
 8004042:	f04f 35ff 	mov.w	r5, #4294967295
 8004046:	e9c4 8900 	strd	r8, r9, [r4]
 800404a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800404e:	e7c4      	b.n	8003fda <__ieee754_rem_pio2+0x7a>
 8004050:	a381      	add	r3, pc, #516	@ (adr r3, 8004258 <__ieee754_rem_pio2+0x2f8>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f7fc f8c1 	bl	80001dc <__adddf3>
 800405a:	a381      	add	r3, pc, #516	@ (adr r3, 8004260 <__ieee754_rem_pio2+0x300>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	4606      	mov	r6, r0
 8004062:	460f      	mov	r7, r1
 8004064:	f7fc f8ba 	bl	80001dc <__adddf3>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4680      	mov	r8, r0
 800406e:	4689      	mov	r9, r1
 8004070:	4630      	mov	r0, r6
 8004072:	4639      	mov	r1, r7
 8004074:	f7fc f8b0 	bl	80001d8 <__aeabi_dsub>
 8004078:	a379      	add	r3, pc, #484	@ (adr r3, 8004260 <__ieee754_rem_pio2+0x300>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	e7de      	b.n	800403e <__ieee754_rem_pio2+0xde>
 8004080:	4b82      	ldr	r3, [pc, #520]	@ (800428c <__ieee754_rem_pio2+0x32c>)
 8004082:	4598      	cmp	r8, r3
 8004084:	f200 80d1 	bhi.w	800422a <__ieee754_rem_pio2+0x2ca>
 8004088:	f000 f966 	bl	8004358 <fabs>
 800408c:	ec57 6b10 	vmov	r6, r7, d0
 8004090:	a375      	add	r3, pc, #468	@ (adr r3, 8004268 <__ieee754_rem_pio2+0x308>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	4630      	mov	r0, r6
 8004098:	4639      	mov	r1, r7
 800409a:	f7fc fa55 	bl	8000548 <__aeabi_dmul>
 800409e:	4b7c      	ldr	r3, [pc, #496]	@ (8004290 <__ieee754_rem_pio2+0x330>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	f7fc f89b 	bl	80001dc <__adddf3>
 80040a6:	f7fc fce9 	bl	8000a7c <__aeabi_d2iz>
 80040aa:	4605      	mov	r5, r0
 80040ac:	f7fc f9e2 	bl	8000474 <__aeabi_i2d>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040b8:	a363      	add	r3, pc, #396	@ (adr r3, 8004248 <__ieee754_rem_pio2+0x2e8>)
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f7fc fa43 	bl	8000548 <__aeabi_dmul>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4630      	mov	r0, r6
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc f885 	bl	80001d8 <__aeabi_dsub>
 80040ce:	a360      	add	r3, pc, #384	@ (adr r3, 8004250 <__ieee754_rem_pio2+0x2f0>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	4682      	mov	sl, r0
 80040d6:	468b      	mov	fp, r1
 80040d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040dc:	f7fc fa34 	bl	8000548 <__aeabi_dmul>
 80040e0:	2d1f      	cmp	r5, #31
 80040e2:	4606      	mov	r6, r0
 80040e4:	460f      	mov	r7, r1
 80040e6:	dc0c      	bgt.n	8004102 <__ieee754_rem_pio2+0x1a2>
 80040e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004294 <__ieee754_rem_pio2+0x334>)
 80040ea:	1e6a      	subs	r2, r5, #1
 80040ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f0:	4543      	cmp	r3, r8
 80040f2:	d006      	beq.n	8004102 <__ieee754_rem_pio2+0x1a2>
 80040f4:	4632      	mov	r2, r6
 80040f6:	463b      	mov	r3, r7
 80040f8:	4650      	mov	r0, sl
 80040fa:	4659      	mov	r1, fp
 80040fc:	f7fc f86c 	bl	80001d8 <__aeabi_dsub>
 8004100:	e00e      	b.n	8004120 <__ieee754_rem_pio2+0x1c0>
 8004102:	463b      	mov	r3, r7
 8004104:	4632      	mov	r2, r6
 8004106:	4650      	mov	r0, sl
 8004108:	4659      	mov	r1, fp
 800410a:	f7fc f865 	bl	80001d8 <__aeabi_dsub>
 800410e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004112:	9305      	str	r3, [sp, #20]
 8004114:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004118:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800411c:	2b10      	cmp	r3, #16
 800411e:	dc02      	bgt.n	8004126 <__ieee754_rem_pio2+0x1c6>
 8004120:	e9c4 0100 	strd	r0, r1, [r4]
 8004124:	e039      	b.n	800419a <__ieee754_rem_pio2+0x23a>
 8004126:	a34c      	add	r3, pc, #304	@ (adr r3, 8004258 <__ieee754_rem_pio2+0x2f8>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004130:	f7fc fa0a 	bl	8000548 <__aeabi_dmul>
 8004134:	4606      	mov	r6, r0
 8004136:	460f      	mov	r7, r1
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4650      	mov	r0, sl
 800413e:	4659      	mov	r1, fp
 8004140:	f7fc f84a 	bl	80001d8 <__aeabi_dsub>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4680      	mov	r8, r0
 800414a:	4689      	mov	r9, r1
 800414c:	4650      	mov	r0, sl
 800414e:	4659      	mov	r1, fp
 8004150:	f7fc f842 	bl	80001d8 <__aeabi_dsub>
 8004154:	4632      	mov	r2, r6
 8004156:	463b      	mov	r3, r7
 8004158:	f7fc f83e 	bl	80001d8 <__aeabi_dsub>
 800415c:	a340      	add	r3, pc, #256	@ (adr r3, 8004260 <__ieee754_rem_pio2+0x300>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	4606      	mov	r6, r0
 8004164:	460f      	mov	r7, r1
 8004166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800416a:	f7fc f9ed 	bl	8000548 <__aeabi_dmul>
 800416e:	4632      	mov	r2, r6
 8004170:	463b      	mov	r3, r7
 8004172:	f7fc f831 	bl	80001d8 <__aeabi_dsub>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4606      	mov	r6, r0
 800417c:	460f      	mov	r7, r1
 800417e:	4640      	mov	r0, r8
 8004180:	4649      	mov	r1, r9
 8004182:	f7fc f829 	bl	80001d8 <__aeabi_dsub>
 8004186:	9a05      	ldr	r2, [sp, #20]
 8004188:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b31      	cmp	r3, #49	@ 0x31
 8004190:	dc20      	bgt.n	80041d4 <__ieee754_rem_pio2+0x274>
 8004192:	e9c4 0100 	strd	r0, r1, [r4]
 8004196:	46c2      	mov	sl, r8
 8004198:	46cb      	mov	fp, r9
 800419a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800419e:	4650      	mov	r0, sl
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	4659      	mov	r1, fp
 80041a6:	f7fc f817 	bl	80001d8 <__aeabi_dsub>
 80041aa:	463b      	mov	r3, r7
 80041ac:	4632      	mov	r2, r6
 80041ae:	f7fc f813 	bl	80001d8 <__aeabi_dsub>
 80041b2:	9b04      	ldr	r3, [sp, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80041ba:	f6bf af0e 	bge.w	8003fda <__ieee754_rem_pio2+0x7a>
 80041be:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80041c8:	f8c4 8000 	str.w	r8, [r4]
 80041cc:	60a0      	str	r0, [r4, #8]
 80041ce:	60e3      	str	r3, [r4, #12]
 80041d0:	426d      	negs	r5, r5
 80041d2:	e702      	b.n	8003fda <__ieee754_rem_pio2+0x7a>
 80041d4:	a326      	add	r3, pc, #152	@ (adr r3, 8004270 <__ieee754_rem_pio2+0x310>)
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041de:	f7fc f9b3 	bl	8000548 <__aeabi_dmul>
 80041e2:	4606      	mov	r6, r0
 80041e4:	460f      	mov	r7, r1
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4640      	mov	r0, r8
 80041ec:	4649      	mov	r1, r9
 80041ee:	f7fb fff3 	bl	80001d8 <__aeabi_dsub>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4682      	mov	sl, r0
 80041f8:	468b      	mov	fp, r1
 80041fa:	4640      	mov	r0, r8
 80041fc:	4649      	mov	r1, r9
 80041fe:	f7fb ffeb 	bl	80001d8 <__aeabi_dsub>
 8004202:	4632      	mov	r2, r6
 8004204:	463b      	mov	r3, r7
 8004206:	f7fb ffe7 	bl	80001d8 <__aeabi_dsub>
 800420a:	a31b      	add	r3, pc, #108	@ (adr r3, 8004278 <__ieee754_rem_pio2+0x318>)
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	4606      	mov	r6, r0
 8004212:	460f      	mov	r7, r1
 8004214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004218:	f7fc f996 	bl	8000548 <__aeabi_dmul>
 800421c:	4632      	mov	r2, r6
 800421e:	463b      	mov	r3, r7
 8004220:	f7fb ffda 	bl	80001d8 <__aeabi_dsub>
 8004224:	4606      	mov	r6, r0
 8004226:	460f      	mov	r7, r1
 8004228:	e764      	b.n	80040f4 <__ieee754_rem_pio2+0x194>
 800422a:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <__ieee754_rem_pio2+0x338>)
 800422c:	4598      	cmp	r8, r3
 800422e:	d935      	bls.n	800429c <__ieee754_rem_pio2+0x33c>
 8004230:	4632      	mov	r2, r6
 8004232:	463b      	mov	r3, r7
 8004234:	4630      	mov	r0, r6
 8004236:	4639      	mov	r1, r7
 8004238:	f7fb ffce 	bl	80001d8 <__aeabi_dsub>
 800423c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004240:	e9c4 0100 	strd	r0, r1, [r4]
 8004244:	e69e      	b.n	8003f84 <__ieee754_rem_pio2+0x24>
 8004246:	bf00      	nop
 8004248:	54400000 	.word	0x54400000
 800424c:	3ff921fb 	.word	0x3ff921fb
 8004250:	1a626331 	.word	0x1a626331
 8004254:	3dd0b461 	.word	0x3dd0b461
 8004258:	1a600000 	.word	0x1a600000
 800425c:	3dd0b461 	.word	0x3dd0b461
 8004260:	2e037073 	.word	0x2e037073
 8004264:	3ba3198a 	.word	0x3ba3198a
 8004268:	6dc9c883 	.word	0x6dc9c883
 800426c:	3fe45f30 	.word	0x3fe45f30
 8004270:	2e000000 	.word	0x2e000000
 8004274:	3ba3198a 	.word	0x3ba3198a
 8004278:	252049c1 	.word	0x252049c1
 800427c:	397b839a 	.word	0x397b839a
 8004280:	3fe921fb 	.word	0x3fe921fb
 8004284:	4002d97b 	.word	0x4002d97b
 8004288:	3ff921fb 	.word	0x3ff921fb
 800428c:	413921fb 	.word	0x413921fb
 8004290:	3fe00000 	.word	0x3fe00000
 8004294:	08004c4c 	.word	0x08004c4c
 8004298:	7fefffff 	.word	0x7fefffff
 800429c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80042a0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80042a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80042a8:	4630      	mov	r0, r6
 80042aa:	460f      	mov	r7, r1
 80042ac:	f7fc fbe6 	bl	8000a7c <__aeabi_d2iz>
 80042b0:	f7fc f8e0 	bl	8000474 <__aeabi_i2d>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4630      	mov	r0, r6
 80042ba:	4639      	mov	r1, r7
 80042bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80042c0:	f7fb ff8a 	bl	80001d8 <__aeabi_dsub>
 80042c4:	4b22      	ldr	r3, [pc, #136]	@ (8004350 <__ieee754_rem_pio2+0x3f0>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	f7fc f93e 	bl	8000548 <__aeabi_dmul>
 80042cc:	460f      	mov	r7, r1
 80042ce:	4606      	mov	r6, r0
 80042d0:	f7fc fbd4 	bl	8000a7c <__aeabi_d2iz>
 80042d4:	f7fc f8ce 	bl	8000474 <__aeabi_i2d>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4630      	mov	r0, r6
 80042de:	4639      	mov	r1, r7
 80042e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042e4:	f7fb ff78 	bl	80001d8 <__aeabi_dsub>
 80042e8:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <__ieee754_rem_pio2+0x3f0>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	f7fc f92c 	bl	8000548 <__aeabi_dmul>
 80042f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80042f4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80042f8:	f04f 0803 	mov.w	r8, #3
 80042fc:	2600      	movs	r6, #0
 80042fe:	2700      	movs	r7, #0
 8004300:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004304:	4632      	mov	r2, r6
 8004306:	463b      	mov	r3, r7
 8004308:	46c2      	mov	sl, r8
 800430a:	f108 38ff 	add.w	r8, r8, #4294967295
 800430e:	f7fc fb83 	bl	8000a18 <__aeabi_dcmpeq>
 8004312:	2800      	cmp	r0, #0
 8004314:	d1f4      	bne.n	8004300 <__ieee754_rem_pio2+0x3a0>
 8004316:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <__ieee754_rem_pio2+0x3f4>)
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	2302      	movs	r3, #2
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	462a      	mov	r2, r5
 8004320:	4653      	mov	r3, sl
 8004322:	4621      	mov	r1, r4
 8004324:	a806      	add	r0, sp, #24
 8004326:	f000 f81f 	bl	8004368 <__kernel_rem_pio2>
 800432a:	9b04      	ldr	r3, [sp, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	4605      	mov	r5, r0
 8004330:	f6bf ae53 	bge.w	8003fda <__ieee754_rem_pio2+0x7a>
 8004334:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004338:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800433c:	e9c4 2300 	strd	r2, r3, [r4]
 8004340:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004344:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004348:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800434c:	e740      	b.n	80041d0 <__ieee754_rem_pio2+0x270>
 800434e:	bf00      	nop
 8004350:	41700000 	.word	0x41700000
 8004354:	08004ccc 	.word	0x08004ccc

08004358 <fabs>:
 8004358:	ec51 0b10 	vmov	r0, r1, d0
 800435c:	4602      	mov	r2, r0
 800435e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004362:	ec43 2b10 	vmov	d0, r2, r3
 8004366:	4770      	bx	lr

08004368 <__kernel_rem_pio2>:
 8004368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	ed2d 8b02 	vpush	{d8}
 8004370:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004374:	f112 0f14 	cmn.w	r2, #20
 8004378:	9306      	str	r3, [sp, #24]
 800437a:	9104      	str	r1, [sp, #16]
 800437c:	4bbe      	ldr	r3, [pc, #760]	@ (8004678 <__kernel_rem_pio2+0x310>)
 800437e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004380:	9008      	str	r0, [sp, #32]
 8004382:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	9b06      	ldr	r3, [sp, #24]
 800438a:	f103 33ff 	add.w	r3, r3, #4294967295
 800438e:	bfa8      	it	ge
 8004390:	1ed4      	subge	r4, r2, #3
 8004392:	9305      	str	r3, [sp, #20]
 8004394:	bfb2      	itee	lt
 8004396:	2400      	movlt	r4, #0
 8004398:	2318      	movge	r3, #24
 800439a:	fb94 f4f3 	sdivge	r4, r4, r3
 800439e:	f06f 0317 	mvn.w	r3, #23
 80043a2:	fb04 3303 	mla	r3, r4, r3, r3
 80043a6:	eb03 0b02 	add.w	fp, r3, r2
 80043aa:	9b00      	ldr	r3, [sp, #0]
 80043ac:	9a05      	ldr	r2, [sp, #20]
 80043ae:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004668 <__kernel_rem_pio2+0x300>
 80043b2:	eb03 0802 	add.w	r8, r3, r2
 80043b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80043b8:	1aa7      	subs	r7, r4, r2
 80043ba:	ae20      	add	r6, sp, #128	@ 0x80
 80043bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80043c0:	2500      	movs	r5, #0
 80043c2:	4545      	cmp	r5, r8
 80043c4:	dd13      	ble.n	80043ee <__kernel_rem_pio2+0x86>
 80043c6:	9b06      	ldr	r3, [sp, #24]
 80043c8:	aa20      	add	r2, sp, #128	@ 0x80
 80043ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80043ce:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80043d2:	f04f 0800 	mov.w	r8, #0
 80043d6:	9b00      	ldr	r3, [sp, #0]
 80043d8:	4598      	cmp	r8, r3
 80043da:	dc31      	bgt.n	8004440 <__kernel_rem_pio2+0xd8>
 80043dc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004668 <__kernel_rem_pio2+0x300>
 80043e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80043e8:	462f      	mov	r7, r5
 80043ea:	2600      	movs	r6, #0
 80043ec:	e01b      	b.n	8004426 <__kernel_rem_pio2+0xbe>
 80043ee:	42ef      	cmn	r7, r5
 80043f0:	d407      	bmi.n	8004402 <__kernel_rem_pio2+0x9a>
 80043f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80043f6:	f7fc f83d 	bl	8000474 <__aeabi_i2d>
 80043fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80043fe:	3501      	adds	r5, #1
 8004400:	e7df      	b.n	80043c2 <__kernel_rem_pio2+0x5a>
 8004402:	ec51 0b18 	vmov	r0, r1, d8
 8004406:	e7f8      	b.n	80043fa <__kernel_rem_pio2+0x92>
 8004408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800440c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004410:	f7fc f89a 	bl	8000548 <__aeabi_dmul>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800441c:	f7fb fede 	bl	80001dc <__adddf3>
 8004420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004424:	3601      	adds	r6, #1
 8004426:	9b05      	ldr	r3, [sp, #20]
 8004428:	429e      	cmp	r6, r3
 800442a:	f1a7 0708 	sub.w	r7, r7, #8
 800442e:	ddeb      	ble.n	8004408 <__kernel_rem_pio2+0xa0>
 8004430:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004434:	f108 0801 	add.w	r8, r8, #1
 8004438:	ecaa 7b02 	vstmia	sl!, {d7}
 800443c:	3508      	adds	r5, #8
 800443e:	e7ca      	b.n	80043d6 <__kernel_rem_pio2+0x6e>
 8004440:	9b00      	ldr	r3, [sp, #0]
 8004442:	f8dd 8000 	ldr.w	r8, [sp]
 8004446:	aa0c      	add	r2, sp, #48	@ 0x30
 8004448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800444c:	930a      	str	r3, [sp, #40]	@ 0x28
 800444e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004450:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004454:	9309      	str	r3, [sp, #36]	@ 0x24
 8004456:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800445a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800445c:	ab98      	add	r3, sp, #608	@ 0x260
 800445e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004462:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8004466:	ed8d 7b02 	vstr	d7, [sp, #8]
 800446a:	ac0c      	add	r4, sp, #48	@ 0x30
 800446c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800446e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8004472:	46a1      	mov	r9, r4
 8004474:	46c2      	mov	sl, r8
 8004476:	f1ba 0f00 	cmp.w	sl, #0
 800447a:	f1a5 0508 	sub.w	r5, r5, #8
 800447e:	dc77      	bgt.n	8004570 <__kernel_rem_pio2+0x208>
 8004480:	4658      	mov	r0, fp
 8004482:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004486:	f000 fac7 	bl	8004a18 <scalbn>
 800448a:	ec57 6b10 	vmov	r6, r7, d0
 800448e:	2200      	movs	r2, #0
 8004490:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004494:	4630      	mov	r0, r6
 8004496:	4639      	mov	r1, r7
 8004498:	f7fc f856 	bl	8000548 <__aeabi_dmul>
 800449c:	ec41 0b10 	vmov	d0, r0, r1
 80044a0:	f000 fb3a 	bl	8004b18 <floor>
 80044a4:	4b75      	ldr	r3, [pc, #468]	@ (800467c <__kernel_rem_pio2+0x314>)
 80044a6:	ec51 0b10 	vmov	r0, r1, d0
 80044aa:	2200      	movs	r2, #0
 80044ac:	f7fc f84c 	bl	8000548 <__aeabi_dmul>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4630      	mov	r0, r6
 80044b6:	4639      	mov	r1, r7
 80044b8:	f7fb fe8e 	bl	80001d8 <__aeabi_dsub>
 80044bc:	460f      	mov	r7, r1
 80044be:	4606      	mov	r6, r0
 80044c0:	f7fc fadc 	bl	8000a7c <__aeabi_d2iz>
 80044c4:	9002      	str	r0, [sp, #8]
 80044c6:	f7fb ffd5 	bl	8000474 <__aeabi_i2d>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4630      	mov	r0, r6
 80044d0:	4639      	mov	r1, r7
 80044d2:	f7fb fe81 	bl	80001d8 <__aeabi_dsub>
 80044d6:	f1bb 0f00 	cmp.w	fp, #0
 80044da:	4606      	mov	r6, r0
 80044dc:	460f      	mov	r7, r1
 80044de:	dd6c      	ble.n	80045ba <__kernel_rem_pio2+0x252>
 80044e0:	f108 31ff 	add.w	r1, r8, #4294967295
 80044e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80044e6:	9d02      	ldr	r5, [sp, #8]
 80044e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044ec:	f1cb 0018 	rsb	r0, fp, #24
 80044f0:	fa43 f200 	asr.w	r2, r3, r0
 80044f4:	4415      	add	r5, r2
 80044f6:	4082      	lsls	r2, r0
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	aa0c      	add	r2, sp, #48	@ 0x30
 80044fc:	9502      	str	r5, [sp, #8]
 80044fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004502:	f1cb 0217 	rsb	r2, fp, #23
 8004506:	fa43 f902 	asr.w	r9, r3, r2
 800450a:	f1b9 0f00 	cmp.w	r9, #0
 800450e:	dd64      	ble.n	80045da <__kernel_rem_pio2+0x272>
 8004510:	9b02      	ldr	r3, [sp, #8]
 8004512:	2200      	movs	r2, #0
 8004514:	3301      	adds	r3, #1
 8004516:	9302      	str	r3, [sp, #8]
 8004518:	4615      	mov	r5, r2
 800451a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800451e:	4590      	cmp	r8, r2
 8004520:	f300 80b8 	bgt.w	8004694 <__kernel_rem_pio2+0x32c>
 8004524:	f1bb 0f00 	cmp.w	fp, #0
 8004528:	dd07      	ble.n	800453a <__kernel_rem_pio2+0x1d2>
 800452a:	f1bb 0f01 	cmp.w	fp, #1
 800452e:	f000 80bf 	beq.w	80046b0 <__kernel_rem_pio2+0x348>
 8004532:	f1bb 0f02 	cmp.w	fp, #2
 8004536:	f000 80c6 	beq.w	80046c6 <__kernel_rem_pio2+0x35e>
 800453a:	f1b9 0f02 	cmp.w	r9, #2
 800453e:	d14c      	bne.n	80045da <__kernel_rem_pio2+0x272>
 8004540:	4632      	mov	r2, r6
 8004542:	463b      	mov	r3, r7
 8004544:	494e      	ldr	r1, [pc, #312]	@ (8004680 <__kernel_rem_pio2+0x318>)
 8004546:	2000      	movs	r0, #0
 8004548:	f7fb fe46 	bl	80001d8 <__aeabi_dsub>
 800454c:	4606      	mov	r6, r0
 800454e:	460f      	mov	r7, r1
 8004550:	2d00      	cmp	r5, #0
 8004552:	d042      	beq.n	80045da <__kernel_rem_pio2+0x272>
 8004554:	4658      	mov	r0, fp
 8004556:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004670 <__kernel_rem_pio2+0x308>
 800455a:	f000 fa5d 	bl	8004a18 <scalbn>
 800455e:	4630      	mov	r0, r6
 8004560:	4639      	mov	r1, r7
 8004562:	ec53 2b10 	vmov	r2, r3, d0
 8004566:	f7fb fe37 	bl	80001d8 <__aeabi_dsub>
 800456a:	4606      	mov	r6, r0
 800456c:	460f      	mov	r7, r1
 800456e:	e034      	b.n	80045da <__kernel_rem_pio2+0x272>
 8004570:	4b44      	ldr	r3, [pc, #272]	@ (8004684 <__kernel_rem_pio2+0x31c>)
 8004572:	2200      	movs	r2, #0
 8004574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004578:	f7fb ffe6 	bl	8000548 <__aeabi_dmul>
 800457c:	f7fc fa7e 	bl	8000a7c <__aeabi_d2iz>
 8004580:	f7fb ff78 	bl	8000474 <__aeabi_i2d>
 8004584:	4b40      	ldr	r3, [pc, #256]	@ (8004688 <__kernel_rem_pio2+0x320>)
 8004586:	2200      	movs	r2, #0
 8004588:	4606      	mov	r6, r0
 800458a:	460f      	mov	r7, r1
 800458c:	f7fb ffdc 	bl	8000548 <__aeabi_dmul>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004598:	f7fb fe1e 	bl	80001d8 <__aeabi_dsub>
 800459c:	f7fc fa6e 	bl	8000a7c <__aeabi_d2iz>
 80045a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80045a4:	f849 0b04 	str.w	r0, [r9], #4
 80045a8:	4639      	mov	r1, r7
 80045aa:	4630      	mov	r0, r6
 80045ac:	f7fb fe16 	bl	80001dc <__adddf3>
 80045b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045b8:	e75d      	b.n	8004476 <__kernel_rem_pio2+0x10e>
 80045ba:	d107      	bne.n	80045cc <__kernel_rem_pio2+0x264>
 80045bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80045c0:	aa0c      	add	r2, sp, #48	@ 0x30
 80045c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80045ca:	e79e      	b.n	800450a <__kernel_rem_pio2+0x1a2>
 80045cc:	4b2f      	ldr	r3, [pc, #188]	@ (800468c <__kernel_rem_pio2+0x324>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	f7fc fa40 	bl	8000a54 <__aeabi_dcmpge>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d143      	bne.n	8004660 <__kernel_rem_pio2+0x2f8>
 80045d8:	4681      	mov	r9, r0
 80045da:	2200      	movs	r2, #0
 80045dc:	2300      	movs	r3, #0
 80045de:	4630      	mov	r0, r6
 80045e0:	4639      	mov	r1, r7
 80045e2:	f7fc fa19 	bl	8000a18 <__aeabi_dcmpeq>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	f000 80bf 	beq.w	800476a <__kernel_rem_pio2+0x402>
 80045ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80045f0:	2200      	movs	r2, #0
 80045f2:	9900      	ldr	r1, [sp, #0]
 80045f4:	428b      	cmp	r3, r1
 80045f6:	da6e      	bge.n	80046d6 <__kernel_rem_pio2+0x36e>
 80045f8:	2a00      	cmp	r2, #0
 80045fa:	f000 8089 	beq.w	8004710 <__kernel_rem_pio2+0x3a8>
 80045fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8004602:	ab0c      	add	r3, sp, #48	@ 0x30
 8004604:	f1ab 0b18 	sub.w	fp, fp, #24
 8004608:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f6      	beq.n	80045fe <__kernel_rem_pio2+0x296>
 8004610:	4658      	mov	r0, fp
 8004612:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004670 <__kernel_rem_pio2+0x308>
 8004616:	f000 f9ff 	bl	8004a18 <scalbn>
 800461a:	f108 0301 	add.w	r3, r8, #1
 800461e:	00da      	lsls	r2, r3, #3
 8004620:	9205      	str	r2, [sp, #20]
 8004622:	ec55 4b10 	vmov	r4, r5, d0
 8004626:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004628:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8004684 <__kernel_rem_pio2+0x31c>
 800462c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004630:	4646      	mov	r6, r8
 8004632:	f04f 0a00 	mov.w	sl, #0
 8004636:	2e00      	cmp	r6, #0
 8004638:	f280 80cf 	bge.w	80047da <__kernel_rem_pio2+0x472>
 800463c:	4644      	mov	r4, r8
 800463e:	2c00      	cmp	r4, #0
 8004640:	f2c0 80fd 	blt.w	800483e <__kernel_rem_pio2+0x4d6>
 8004644:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <__kernel_rem_pio2+0x328>)
 8004646:	461f      	mov	r7, r3
 8004648:	ab70      	add	r3, sp, #448	@ 0x1c0
 800464a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800464e:	9306      	str	r3, [sp, #24]
 8004650:	f04f 0a00 	mov.w	sl, #0
 8004654:	f04f 0b00 	mov.w	fp, #0
 8004658:	2600      	movs	r6, #0
 800465a:	eba8 0504 	sub.w	r5, r8, r4
 800465e:	e0e2      	b.n	8004826 <__kernel_rem_pio2+0x4be>
 8004660:	f04f 0902 	mov.w	r9, #2
 8004664:	e754      	b.n	8004510 <__kernel_rem_pio2+0x1a8>
 8004666:	bf00      	nop
	...
 8004674:	3ff00000 	.word	0x3ff00000
 8004678:	08004e18 	.word	0x08004e18
 800467c:	40200000 	.word	0x40200000
 8004680:	3ff00000 	.word	0x3ff00000
 8004684:	3e700000 	.word	0x3e700000
 8004688:	41700000 	.word	0x41700000
 800468c:	3fe00000 	.word	0x3fe00000
 8004690:	08004dd8 	.word	0x08004dd8
 8004694:	f854 3b04 	ldr.w	r3, [r4], #4
 8004698:	b945      	cbnz	r5, 80046ac <__kernel_rem_pio2+0x344>
 800469a:	b123      	cbz	r3, 80046a6 <__kernel_rem_pio2+0x33e>
 800469c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80046a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80046a4:	2301      	movs	r3, #1
 80046a6:	3201      	adds	r2, #1
 80046a8:	461d      	mov	r5, r3
 80046aa:	e738      	b.n	800451e <__kernel_rem_pio2+0x1b6>
 80046ac:	1acb      	subs	r3, r1, r3
 80046ae:	e7f7      	b.n	80046a0 <__kernel_rem_pio2+0x338>
 80046b0:	f108 32ff 	add.w	r2, r8, #4294967295
 80046b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80046b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80046be:	a90c      	add	r1, sp, #48	@ 0x30
 80046c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80046c4:	e739      	b.n	800453a <__kernel_rem_pio2+0x1d2>
 80046c6:	f108 32ff 	add.w	r2, r8, #4294967295
 80046ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80046cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80046d4:	e7f3      	b.n	80046be <__kernel_rem_pio2+0x356>
 80046d6:	a90c      	add	r1, sp, #48	@ 0x30
 80046d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80046dc:	3b01      	subs	r3, #1
 80046de:	430a      	orrs	r2, r1
 80046e0:	e787      	b.n	80045f2 <__kernel_rem_pio2+0x28a>
 80046e2:	3401      	adds	r4, #1
 80046e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80046e8:	2a00      	cmp	r2, #0
 80046ea:	d0fa      	beq.n	80046e2 <__kernel_rem_pio2+0x37a>
 80046ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80046f2:	eb0d 0503 	add.w	r5, sp, r3
 80046f6:	9b06      	ldr	r3, [sp, #24]
 80046f8:	aa20      	add	r2, sp, #128	@ 0x80
 80046fa:	4443      	add	r3, r8
 80046fc:	f108 0701 	add.w	r7, r8, #1
 8004700:	3d98      	subs	r5, #152	@ 0x98
 8004702:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004706:	4444      	add	r4, r8
 8004708:	42bc      	cmp	r4, r7
 800470a:	da04      	bge.n	8004716 <__kernel_rem_pio2+0x3ae>
 800470c:	46a0      	mov	r8, r4
 800470e:	e6a2      	b.n	8004456 <__kernel_rem_pio2+0xee>
 8004710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004712:	2401      	movs	r4, #1
 8004714:	e7e6      	b.n	80046e4 <__kernel_rem_pio2+0x37c>
 8004716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004718:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800471c:	f7fb feaa 	bl	8000474 <__aeabi_i2d>
 8004720:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80049e8 <__kernel_rem_pio2+0x680>
 8004724:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004728:	ed8d 7b02 	vstr	d7, [sp, #8]
 800472c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004730:	46b2      	mov	sl, r6
 8004732:	f04f 0800 	mov.w	r8, #0
 8004736:	9b05      	ldr	r3, [sp, #20]
 8004738:	4598      	cmp	r8, r3
 800473a:	dd05      	ble.n	8004748 <__kernel_rem_pio2+0x3e0>
 800473c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004740:	3701      	adds	r7, #1
 8004742:	eca5 7b02 	vstmia	r5!, {d7}
 8004746:	e7df      	b.n	8004708 <__kernel_rem_pio2+0x3a0>
 8004748:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800474c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004750:	f7fb fefa 	bl	8000548 <__aeabi_dmul>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800475c:	f7fb fd3e 	bl	80001dc <__adddf3>
 8004760:	f108 0801 	add.w	r8, r8, #1
 8004764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004768:	e7e5      	b.n	8004736 <__kernel_rem_pio2+0x3ce>
 800476a:	f1cb 0000 	rsb	r0, fp, #0
 800476e:	ec47 6b10 	vmov	d0, r6, r7
 8004772:	f000 f951 	bl	8004a18 <scalbn>
 8004776:	ec55 4b10 	vmov	r4, r5, d0
 800477a:	4b9d      	ldr	r3, [pc, #628]	@ (80049f0 <__kernel_rem_pio2+0x688>)
 800477c:	2200      	movs	r2, #0
 800477e:	4620      	mov	r0, r4
 8004780:	4629      	mov	r1, r5
 8004782:	f7fc f967 	bl	8000a54 <__aeabi_dcmpge>
 8004786:	b300      	cbz	r0, 80047ca <__kernel_rem_pio2+0x462>
 8004788:	4b9a      	ldr	r3, [pc, #616]	@ (80049f4 <__kernel_rem_pio2+0x68c>)
 800478a:	2200      	movs	r2, #0
 800478c:	4620      	mov	r0, r4
 800478e:	4629      	mov	r1, r5
 8004790:	f7fb feda 	bl	8000548 <__aeabi_dmul>
 8004794:	f7fc f972 	bl	8000a7c <__aeabi_d2iz>
 8004798:	4606      	mov	r6, r0
 800479a:	f7fb fe6b 	bl	8000474 <__aeabi_i2d>
 800479e:	4b94      	ldr	r3, [pc, #592]	@ (80049f0 <__kernel_rem_pio2+0x688>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	f7fb fed1 	bl	8000548 <__aeabi_dmul>
 80047a6:	460b      	mov	r3, r1
 80047a8:	4602      	mov	r2, r0
 80047aa:	4629      	mov	r1, r5
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7fb fd13 	bl	80001d8 <__aeabi_dsub>
 80047b2:	f7fc f963 	bl	8000a7c <__aeabi_d2iz>
 80047b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80047b8:	f10b 0b18 	add.w	fp, fp, #24
 80047bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80047c0:	f108 0801 	add.w	r8, r8, #1
 80047c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80047c8:	e722      	b.n	8004610 <__kernel_rem_pio2+0x2a8>
 80047ca:	4620      	mov	r0, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	f7fc f955 	bl	8000a7c <__aeabi_d2iz>
 80047d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80047d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80047d8:	e71a      	b.n	8004610 <__kernel_rem_pio2+0x2a8>
 80047da:	ab0c      	add	r3, sp, #48	@ 0x30
 80047dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80047e0:	f7fb fe48 	bl	8000474 <__aeabi_i2d>
 80047e4:	4622      	mov	r2, r4
 80047e6:	462b      	mov	r3, r5
 80047e8:	f7fb feae 	bl	8000548 <__aeabi_dmul>
 80047ec:	4652      	mov	r2, sl
 80047ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80047f2:	465b      	mov	r3, fp
 80047f4:	4620      	mov	r0, r4
 80047f6:	4629      	mov	r1, r5
 80047f8:	f7fb fea6 	bl	8000548 <__aeabi_dmul>
 80047fc:	3e01      	subs	r6, #1
 80047fe:	4604      	mov	r4, r0
 8004800:	460d      	mov	r5, r1
 8004802:	e718      	b.n	8004636 <__kernel_rem_pio2+0x2ce>
 8004804:	9906      	ldr	r1, [sp, #24]
 8004806:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800480a:	9106      	str	r1, [sp, #24]
 800480c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004810:	f7fb fe9a 	bl	8000548 <__aeabi_dmul>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4650      	mov	r0, sl
 800481a:	4659      	mov	r1, fp
 800481c:	f7fb fcde 	bl	80001dc <__adddf3>
 8004820:	3601      	adds	r6, #1
 8004822:	4682      	mov	sl, r0
 8004824:	468b      	mov	fp, r1
 8004826:	9b00      	ldr	r3, [sp, #0]
 8004828:	429e      	cmp	r6, r3
 800482a:	dc01      	bgt.n	8004830 <__kernel_rem_pio2+0x4c8>
 800482c:	42b5      	cmp	r5, r6
 800482e:	dae9      	bge.n	8004804 <__kernel_rem_pio2+0x49c>
 8004830:	ab48      	add	r3, sp, #288	@ 0x120
 8004832:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004836:	e9c5 ab00 	strd	sl, fp, [r5]
 800483a:	3c01      	subs	r4, #1
 800483c:	e6ff      	b.n	800463e <__kernel_rem_pio2+0x2d6>
 800483e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004840:	2b02      	cmp	r3, #2
 8004842:	dc0b      	bgt.n	800485c <__kernel_rem_pio2+0x4f4>
 8004844:	2b00      	cmp	r3, #0
 8004846:	dc39      	bgt.n	80048bc <__kernel_rem_pio2+0x554>
 8004848:	d05d      	beq.n	8004906 <__kernel_rem_pio2+0x59e>
 800484a:	9b02      	ldr	r3, [sp, #8]
 800484c:	f003 0007 	and.w	r0, r3, #7
 8004850:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004854:	ecbd 8b02 	vpop	{d8}
 8004858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800485e:	2b03      	cmp	r3, #3
 8004860:	d1f3      	bne.n	800484a <__kernel_rem_pio2+0x4e2>
 8004862:	9b05      	ldr	r3, [sp, #20]
 8004864:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004868:	eb0d 0403 	add.w	r4, sp, r3
 800486c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004870:	4625      	mov	r5, r4
 8004872:	46c2      	mov	sl, r8
 8004874:	f1ba 0f00 	cmp.w	sl, #0
 8004878:	f1a5 0508 	sub.w	r5, r5, #8
 800487c:	dc6b      	bgt.n	8004956 <__kernel_rem_pio2+0x5ee>
 800487e:	4645      	mov	r5, r8
 8004880:	2d01      	cmp	r5, #1
 8004882:	f1a4 0408 	sub.w	r4, r4, #8
 8004886:	f300 8087 	bgt.w	8004998 <__kernel_rem_pio2+0x630>
 800488a:	9c05      	ldr	r4, [sp, #20]
 800488c:	ab48      	add	r3, sp, #288	@ 0x120
 800488e:	441c      	add	r4, r3
 8004890:	2000      	movs	r0, #0
 8004892:	2100      	movs	r1, #0
 8004894:	f1b8 0f01 	cmp.w	r8, #1
 8004898:	f300 809c 	bgt.w	80049d4 <__kernel_rem_pio2+0x66c>
 800489c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80048a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80048a4:	f1b9 0f00 	cmp.w	r9, #0
 80048a8:	f040 80a6 	bne.w	80049f8 <__kernel_rem_pio2+0x690>
 80048ac:	9b04      	ldr	r3, [sp, #16]
 80048ae:	e9c3 7800 	strd	r7, r8, [r3]
 80048b2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80048b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80048ba:	e7c6      	b.n	800484a <__kernel_rem_pio2+0x4e2>
 80048bc:	9d05      	ldr	r5, [sp, #20]
 80048be:	ab48      	add	r3, sp, #288	@ 0x120
 80048c0:	441d      	add	r5, r3
 80048c2:	4644      	mov	r4, r8
 80048c4:	2000      	movs	r0, #0
 80048c6:	2100      	movs	r1, #0
 80048c8:	2c00      	cmp	r4, #0
 80048ca:	da35      	bge.n	8004938 <__kernel_rem_pio2+0x5d0>
 80048cc:	f1b9 0f00 	cmp.w	r9, #0
 80048d0:	d038      	beq.n	8004944 <__kernel_rem_pio2+0x5dc>
 80048d2:	4602      	mov	r2, r0
 80048d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048d8:	9c04      	ldr	r4, [sp, #16]
 80048da:	e9c4 2300 	strd	r2, r3, [r4]
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80048e6:	f7fb fc77 	bl	80001d8 <__aeabi_dsub>
 80048ea:	ad4a      	add	r5, sp, #296	@ 0x128
 80048ec:	2401      	movs	r4, #1
 80048ee:	45a0      	cmp	r8, r4
 80048f0:	da2b      	bge.n	800494a <__kernel_rem_pio2+0x5e2>
 80048f2:	f1b9 0f00 	cmp.w	r9, #0
 80048f6:	d002      	beq.n	80048fe <__kernel_rem_pio2+0x596>
 80048f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048fc:	4619      	mov	r1, r3
 80048fe:	9b04      	ldr	r3, [sp, #16]
 8004900:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004904:	e7a1      	b.n	800484a <__kernel_rem_pio2+0x4e2>
 8004906:	9c05      	ldr	r4, [sp, #20]
 8004908:	ab48      	add	r3, sp, #288	@ 0x120
 800490a:	441c      	add	r4, r3
 800490c:	2000      	movs	r0, #0
 800490e:	2100      	movs	r1, #0
 8004910:	f1b8 0f00 	cmp.w	r8, #0
 8004914:	da09      	bge.n	800492a <__kernel_rem_pio2+0x5c2>
 8004916:	f1b9 0f00 	cmp.w	r9, #0
 800491a:	d002      	beq.n	8004922 <__kernel_rem_pio2+0x5ba>
 800491c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004920:	4619      	mov	r1, r3
 8004922:	9b04      	ldr	r3, [sp, #16]
 8004924:	e9c3 0100 	strd	r0, r1, [r3]
 8004928:	e78f      	b.n	800484a <__kernel_rem_pio2+0x4e2>
 800492a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800492e:	f7fb fc55 	bl	80001dc <__adddf3>
 8004932:	f108 38ff 	add.w	r8, r8, #4294967295
 8004936:	e7eb      	b.n	8004910 <__kernel_rem_pio2+0x5a8>
 8004938:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800493c:	f7fb fc4e 	bl	80001dc <__adddf3>
 8004940:	3c01      	subs	r4, #1
 8004942:	e7c1      	b.n	80048c8 <__kernel_rem_pio2+0x560>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	e7c6      	b.n	80048d8 <__kernel_rem_pio2+0x570>
 800494a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800494e:	f7fb fc45 	bl	80001dc <__adddf3>
 8004952:	3401      	adds	r4, #1
 8004954:	e7cb      	b.n	80048ee <__kernel_rem_pio2+0x586>
 8004956:	ed95 7b00 	vldr	d7, [r5]
 800495a:	ed8d 7b00 	vstr	d7, [sp]
 800495e:	ed95 7b02 	vldr	d7, [r5, #8]
 8004962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004966:	ec53 2b17 	vmov	r2, r3, d7
 800496a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800496e:	f7fb fc35 	bl	80001dc <__adddf3>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4606      	mov	r6, r0
 8004978:	460f      	mov	r7, r1
 800497a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800497e:	f7fb fc2b 	bl	80001d8 <__aeabi_dsub>
 8004982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004986:	f7fb fc29 	bl	80001dc <__adddf3>
 800498a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800498e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004992:	e9c5 6700 	strd	r6, r7, [r5]
 8004996:	e76d      	b.n	8004874 <__kernel_rem_pio2+0x50c>
 8004998:	ed94 7b00 	vldr	d7, [r4]
 800499c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80049a0:	ec51 0b17 	vmov	r0, r1, d7
 80049a4:	4652      	mov	r2, sl
 80049a6:	465b      	mov	r3, fp
 80049a8:	ed8d 7b00 	vstr	d7, [sp]
 80049ac:	f7fb fc16 	bl	80001dc <__adddf3>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4606      	mov	r6, r0
 80049b6:	460f      	mov	r7, r1
 80049b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049bc:	f7fb fc0c 	bl	80001d8 <__aeabi_dsub>
 80049c0:	4652      	mov	r2, sl
 80049c2:	465b      	mov	r3, fp
 80049c4:	f7fb fc0a 	bl	80001dc <__adddf3>
 80049c8:	3d01      	subs	r5, #1
 80049ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049ce:	e9c4 6700 	strd	r6, r7, [r4]
 80049d2:	e755      	b.n	8004880 <__kernel_rem_pio2+0x518>
 80049d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80049d8:	f7fb fc00 	bl	80001dc <__adddf3>
 80049dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80049e0:	e758      	b.n	8004894 <__kernel_rem_pio2+0x52c>
 80049e2:	bf00      	nop
 80049e4:	f3af 8000 	nop.w
	...
 80049f0:	41700000 	.word	0x41700000
 80049f4:	3e700000 	.word	0x3e700000
 80049f8:	9b04      	ldr	r3, [sp, #16]
 80049fa:	9a04      	ldr	r2, [sp, #16]
 80049fc:	601f      	str	r7, [r3, #0]
 80049fe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004a02:	605c      	str	r4, [r3, #4]
 8004a04:	609d      	str	r5, [r3, #8]
 8004a06:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a0a:	60d3      	str	r3, [r2, #12]
 8004a0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a10:	6110      	str	r0, [r2, #16]
 8004a12:	6153      	str	r3, [r2, #20]
 8004a14:	e719      	b.n	800484a <__kernel_rem_pio2+0x4e2>
 8004a16:	bf00      	nop

08004a18 <scalbn>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	ec55 4b10 	vmov	r4, r5, d0
 8004a1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004a22:	4606      	mov	r6, r0
 8004a24:	462b      	mov	r3, r5
 8004a26:	b991      	cbnz	r1, 8004a4e <scalbn+0x36>
 8004a28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004a2c:	4323      	orrs	r3, r4
 8004a2e:	d03d      	beq.n	8004aac <scalbn+0x94>
 8004a30:	4b35      	ldr	r3, [pc, #212]	@ (8004b08 <scalbn+0xf0>)
 8004a32:	4620      	mov	r0, r4
 8004a34:	4629      	mov	r1, r5
 8004a36:	2200      	movs	r2, #0
 8004a38:	f7fb fd86 	bl	8000548 <__aeabi_dmul>
 8004a3c:	4b33      	ldr	r3, [pc, #204]	@ (8004b0c <scalbn+0xf4>)
 8004a3e:	429e      	cmp	r6, r3
 8004a40:	4604      	mov	r4, r0
 8004a42:	460d      	mov	r5, r1
 8004a44:	da0f      	bge.n	8004a66 <scalbn+0x4e>
 8004a46:	a328      	add	r3, pc, #160	@ (adr r3, 8004ae8 <scalbn+0xd0>)
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	e01e      	b.n	8004a8c <scalbn+0x74>
 8004a4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004a52:	4291      	cmp	r1, r2
 8004a54:	d10b      	bne.n	8004a6e <scalbn+0x56>
 8004a56:	4622      	mov	r2, r4
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fbbe 	bl	80001dc <__adddf3>
 8004a60:	4604      	mov	r4, r0
 8004a62:	460d      	mov	r5, r1
 8004a64:	e022      	b.n	8004aac <scalbn+0x94>
 8004a66:	460b      	mov	r3, r1
 8004a68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004a6c:	3936      	subs	r1, #54	@ 0x36
 8004a6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004a72:	4296      	cmp	r6, r2
 8004a74:	dd0d      	ble.n	8004a92 <scalbn+0x7a>
 8004a76:	2d00      	cmp	r5, #0
 8004a78:	a11d      	add	r1, pc, #116	@ (adr r1, 8004af0 <scalbn+0xd8>)
 8004a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a7e:	da02      	bge.n	8004a86 <scalbn+0x6e>
 8004a80:	a11d      	add	r1, pc, #116	@ (adr r1, 8004af8 <scalbn+0xe0>)
 8004a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a86:	a31a      	add	r3, pc, #104	@ (adr r3, 8004af0 <scalbn+0xd8>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f7fb fd5c 	bl	8000548 <__aeabi_dmul>
 8004a90:	e7e6      	b.n	8004a60 <scalbn+0x48>
 8004a92:	1872      	adds	r2, r6, r1
 8004a94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004a98:	428a      	cmp	r2, r1
 8004a9a:	dcec      	bgt.n	8004a76 <scalbn+0x5e>
 8004a9c:	2a00      	cmp	r2, #0
 8004a9e:	dd08      	ble.n	8004ab2 <scalbn+0x9a>
 8004aa0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004aa4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004aa8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004aac:	ec45 4b10 	vmov	d0, r4, r5
 8004ab0:	bd70      	pop	{r4, r5, r6, pc}
 8004ab2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004ab6:	da08      	bge.n	8004aca <scalbn+0xb2>
 8004ab8:	2d00      	cmp	r5, #0
 8004aba:	a10b      	add	r1, pc, #44	@ (adr r1, 8004ae8 <scalbn+0xd0>)
 8004abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ac0:	dac1      	bge.n	8004a46 <scalbn+0x2e>
 8004ac2:	a10f      	add	r1, pc, #60	@ (adr r1, 8004b00 <scalbn+0xe8>)
 8004ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ac8:	e7bd      	b.n	8004a46 <scalbn+0x2e>
 8004aca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004ace:	3236      	adds	r2, #54	@ 0x36
 8004ad0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004ad4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ad8:	4620      	mov	r0, r4
 8004ada:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <scalbn+0xf8>)
 8004adc:	4629      	mov	r1, r5
 8004ade:	2200      	movs	r2, #0
 8004ae0:	e7d4      	b.n	8004a8c <scalbn+0x74>
 8004ae2:	bf00      	nop
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	c2f8f359 	.word	0xc2f8f359
 8004aec:	01a56e1f 	.word	0x01a56e1f
 8004af0:	8800759c 	.word	0x8800759c
 8004af4:	7e37e43c 	.word	0x7e37e43c
 8004af8:	8800759c 	.word	0x8800759c
 8004afc:	fe37e43c 	.word	0xfe37e43c
 8004b00:	c2f8f359 	.word	0xc2f8f359
 8004b04:	81a56e1f 	.word	0x81a56e1f
 8004b08:	43500000 	.word	0x43500000
 8004b0c:	ffff3cb0 	.word	0xffff3cb0
 8004b10:	3c900000 	.word	0x3c900000
 8004b14:	00000000 	.word	0x00000000

08004b18 <floor>:
 8004b18:	ec51 0b10 	vmov	r0, r1, d0
 8004b1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b24:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004b28:	2e13      	cmp	r6, #19
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	4680      	mov	r8, r0
 8004b30:	dc34      	bgt.n	8004b9c <floor+0x84>
 8004b32:	2e00      	cmp	r6, #0
 8004b34:	da17      	bge.n	8004b66 <floor+0x4e>
 8004b36:	a332      	add	r3, pc, #200	@ (adr r3, 8004c00 <floor+0xe8>)
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f7fb fb4e 	bl	80001dc <__adddf3>
 8004b40:	2200      	movs	r2, #0
 8004b42:	2300      	movs	r3, #0
 8004b44:	f7fb ff90 	bl	8000a68 <__aeabi_dcmpgt>
 8004b48:	b150      	cbz	r0, 8004b60 <floor+0x48>
 8004b4a:	2c00      	cmp	r4, #0
 8004b4c:	da55      	bge.n	8004bfa <floor+0xe2>
 8004b4e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004b52:	432c      	orrs	r4, r5
 8004b54:	2500      	movs	r5, #0
 8004b56:	42ac      	cmp	r4, r5
 8004b58:	4c2b      	ldr	r4, [pc, #172]	@ (8004c08 <floor+0xf0>)
 8004b5a:	bf08      	it	eq
 8004b5c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004b60:	4621      	mov	r1, r4
 8004b62:	4628      	mov	r0, r5
 8004b64:	e023      	b.n	8004bae <floor+0x96>
 8004b66:	4f29      	ldr	r7, [pc, #164]	@ (8004c0c <floor+0xf4>)
 8004b68:	4137      	asrs	r7, r6
 8004b6a:	ea01 0307 	and.w	r3, r1, r7
 8004b6e:	4303      	orrs	r3, r0
 8004b70:	d01d      	beq.n	8004bae <floor+0x96>
 8004b72:	a323      	add	r3, pc, #140	@ (adr r3, 8004c00 <floor+0xe8>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fb30 	bl	80001dc <__adddf3>
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f7fb ff72 	bl	8000a68 <__aeabi_dcmpgt>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d0eb      	beq.n	8004b60 <floor+0x48>
 8004b88:	2c00      	cmp	r4, #0
 8004b8a:	bfbe      	ittt	lt
 8004b8c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004b90:	4133      	asrlt	r3, r6
 8004b92:	18e4      	addlt	r4, r4, r3
 8004b94:	ea24 0407 	bic.w	r4, r4, r7
 8004b98:	2500      	movs	r5, #0
 8004b9a:	e7e1      	b.n	8004b60 <floor+0x48>
 8004b9c:	2e33      	cmp	r6, #51	@ 0x33
 8004b9e:	dd0a      	ble.n	8004bb6 <floor+0x9e>
 8004ba0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004ba4:	d103      	bne.n	8004bae <floor+0x96>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	f7fb fb17 	bl	80001dc <__adddf3>
 8004bae:	ec41 0b10 	vmov	d0, r0, r1
 8004bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004bba:	f04f 37ff 	mov.w	r7, #4294967295
 8004bbe:	40df      	lsrs	r7, r3
 8004bc0:	4207      	tst	r7, r0
 8004bc2:	d0f4      	beq.n	8004bae <floor+0x96>
 8004bc4:	a30e      	add	r3, pc, #56	@ (adr r3, 8004c00 <floor+0xe8>)
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	f7fb fb07 	bl	80001dc <__adddf3>
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f7fb ff49 	bl	8000a68 <__aeabi_dcmpgt>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d0c2      	beq.n	8004b60 <floor+0x48>
 8004bda:	2c00      	cmp	r4, #0
 8004bdc:	da0a      	bge.n	8004bf4 <floor+0xdc>
 8004bde:	2e14      	cmp	r6, #20
 8004be0:	d101      	bne.n	8004be6 <floor+0xce>
 8004be2:	3401      	adds	r4, #1
 8004be4:	e006      	b.n	8004bf4 <floor+0xdc>
 8004be6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004bea:	2301      	movs	r3, #1
 8004bec:	40b3      	lsls	r3, r6
 8004bee:	441d      	add	r5, r3
 8004bf0:	4545      	cmp	r5, r8
 8004bf2:	d3f6      	bcc.n	8004be2 <floor+0xca>
 8004bf4:	ea25 0507 	bic.w	r5, r5, r7
 8004bf8:	e7b2      	b.n	8004b60 <floor+0x48>
 8004bfa:	2500      	movs	r5, #0
 8004bfc:	462c      	mov	r4, r5
 8004bfe:	e7af      	b.n	8004b60 <floor+0x48>
 8004c00:	8800759c 	.word	0x8800759c
 8004c04:	7e37e43c 	.word	0x7e37e43c
 8004c08:	bff00000 	.word	0xbff00000
 8004c0c:	000fffff 	.word	0x000fffff

08004c10 <_init>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr

08004c1c <_fini>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	bf00      	nop
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr
